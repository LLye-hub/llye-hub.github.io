<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LLye</title>
  
  
  <link href="https://llye-hub.github.io/atom.xml" rel="self"/>
  
  <link href="https://llye-hub.github.io/"/>
  <updated>2023-03-17T08:53:58.271Z</updated>
  <id>https://llye-hub.github.io/</id>
  
  <author>
    <name>LLye</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hive本机安装</title>
    <link href="https://llye-hub.github.io/posts/47d5b7b0.html"/>
    <id>https://llye-hub.github.io/posts/47d5b7b0.html</id>
    <published>2023-03-15T02:49:23.000Z</published>
    <updated>2023-03-17T08:53:58.271Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考文章</strong></p><p><a href="https://zhuanlan.zhihu.com/p/68748400">Hive源码系列（一）hive2.1.1+hadoop2.7.3环境搭建</a></p><p><a href="https://juejin.cn/post/7114252763621490719">Hive安装超详细教程</a></p><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p><a href="https://dlcdn.apache.org/hive/">下载地址</a></p><ul><li>解压安装包<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-hive-2.3.9-bin.tar.gz</span><br></pre></td></tr></table></figure></li></ul><p><strong>环境变量配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HIVE_HOME=/Users/llye/soft/hive-2.3.9</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">export</span> PATH=<span class="variable">$HIVE_HOME</span>/bin:<span class="variable">$PATH</span></span></span><br><span class="line">vi ~/.bash_profile </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生效</span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">hive --version</span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd $HIVE_HOME/conf</span><br></pre></td></tr></table></figure><p><code>vi hive-site.xml</code>编辑内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  以mysql作为hive元数据库  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://localhost:3306/hivedb?createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=GMT<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>hive metastore连接串<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Hive metastore JDBC驱动<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Mysql登录账号<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>rootroot<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Mysql登录密码<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 忽略HIVE 元数据库版本的校验，如果非要校验就得进入MYSQL升级版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.current.db<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.cli.print.header<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  配置hive用户名、密码  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.jdbc_passwd.auth.root<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>rootroot<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.jdbc_passwd.auth.llye<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>rootroot<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- hiveserver2 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  配置用户安全认证方式  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.authentication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>NONE<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">            Expects one of [nosasl, none, ldap, kerberos, pam, custom].</span><br><span class="line">            Client authentication types.</span><br><span class="line">            NONE: no authentication check</span><br><span class="line">            LDAP: LDAP/AD based authentication</span><br><span class="line">            KERBEROS: Kerberos/GSSAPI authentication</span><br><span class="line">            CUSTOM: Custom authentication provider</span><br><span class="line">            (Use with property hive.server2.custom.authentication.class)</span><br><span class="line">            PAM: Pluggable authentication module</span><br><span class="line">            NOSASL:  Raw transport</span><br><span class="line">        <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.custom.authentication.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hive.contrib.auth.CustomPasswdAuthenticator<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>配置用于权限认证的类【这里实际没有】<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定 hiveserver2 jdbc连接的 host+port --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.bind.host<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>hiveserver2 jdbc连接的 host<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>hiveserver2 jdbc连接的端口号<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  配置webUI界面 host+port  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.webui.host<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.webui.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>10002<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>下载连接MySQL的驱动包到hive的lib目录下</strong></p><p><code>mysql-connector-java-8.0.17.jar</code><a href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.17/mysql-connector-java-8.0.17.jar">下载地址</a></p><p><strong>初始化hive元数据库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $HIVE_HOME/bin</span><br><span class="line">schematool -initSchema -dbType mysql -verbose</span><br></pre></td></tr></table></figure><p><strong>验证初始化是否成功</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- mysql的hivedb库中，若展示多个数据表，即代表初始化成功</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/03/15/JxW5E.png" alt="JxW5E.png"></p><p><strong>启动hive</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HADOOP_HOME/sbin/start-dfs.sh &amp;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HADOOP_HOME/sbin/start-yarn.sh</span></span><br><span class="line">cd $HIVE_HOME </span><br><span class="line">hive </span><br></pre></td></tr></table></figure><p>遇到启动报错<code>org.apache.hadoop.hdfs.server.namenode.SafeModeException): Cannot create directory /tmp/hive</code>时，执行命令<code>hdfs dfsadmin -safemode leave</code>关闭HDFS安全模式</p><p><strong>验证</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(id <span class="type">int</span>, name string);</span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> student <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/03/15/J73cF.png" alt="J73cF.png"></p><h1 id="beeline连接hiveserver2"><a href="#beeline连接hiveserver2" class="headerlink" title="beeline连接hiveserver2"></a>beeline连接hiveserver2</h1><p><strong>hadoop配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd $HADOOP_HOME/etc/hadoop</span><br></pre></td></tr></table></figure><p><code>vi core-site.xml</code>补充内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.llye.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.llye.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>重启hadoop</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HADOOP_HOME/sbin/stop-dfs.sh &amp;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HADOOP_HOME/sbin/stop-yarn.sh &amp;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HADOOP_HOME/sbin/start-dfs.sh &amp;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HADOOP_HOME/sbin/start-yarn.sh</span> </span><br></pre></td></tr></table></figure><p><strong>启动hiveserver2</strong></p><p>配置了hive的环境变量，任意文件夹下执行即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hiveservice2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">hive --service hiveservice2</span><br></pre></td></tr></table></figure><p><strong>beeline连接</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beeline</span><br><span class="line"><span class="meta prompt_">beeline&gt; </span><span class="language-bash">!connect jdbc:hive2://localhost:10000/default</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或</span></span><br><span class="line">beeline -u jdbc:hive2://localhost:10000/default </span><br></pre></td></tr></table></figure><p>遇到报错问题的参考<br><a href="https://blog.csdn.net/qq_16633405/article/details/82190440">beeline连接hiveserver2报错：User: root is not allowed to impersonate root</a><br><a href="https://developer.aliyun.com/article/606803">Hive JDBC：Permission denied: user&#x3D;anonymous, access&#x3D;EXECUTE, inode&#x3D;”&#x2F;tmp”</a></p><h1 id="客户端jdbc连接hive库"><a href="#客户端jdbc连接hive库" class="headerlink" title="客户端jdbc连接hive库"></a>客户端jdbc连接hive库</h1><p>jdbc URL：<code>jdbc:hive2://localhost:10000/default</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/68748400&quot;&gt;Hive源码系列（一）hive2.1.1+hadoop2.7.3环境搭建&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="hive" scheme="https://llye-hub.github.io/categories/hive/"/>
    
    
    <category term="hive安装" scheme="https://llye-hub.github.io/tags/hive%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>hadoop本机安装</title>
    <link href="https://llye-hub.github.io/posts/2cb81866.html"/>
    <id>https://llye-hub.github.io/posts/2cb81866.html</id>
    <published>2023-03-15T02:49:02.000Z</published>
    <updated>2023-03-17T08:31:42.984Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考文章</strong></p><p><a href="https://zhuanlan.zhihu.com/p/68748400">Hive源码系列（一）hive2.1.1+hadoop2.7.3环境搭建</a></p><p><a href="https://cloud.tencent.com/developer/article/1708064">Hadoop【单机安装-测试程序WordCount】</a></p><p>Hadoop 安装有三种方式：</p><p><code>单机模式</code>：安装简单，几乎不用做任何配置，但仅限于调试用途；</p><p><code>伪分布模式</code>：在单节点上同时启动 NameNode、DataNode、JobTracker、TaskTracker、Secondary Namenode 等 5 个进程，模拟分布式运行的各个节点；</p><p><code>完全分布式模式</code>：正常的 Hadoop 集群，由多个各司其职的节点构成。</p><p>本人选择的是<code>伪分布模式</code>安装</p><p><strong>下载安装</strong></p><p><a href="https://hadoop.apache.org/">下载地址</a></p><ul><li>解压安装包<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hadoop-3.3.1.tar.gz</span><br></pre></td></tr></table></figure></li></ul><p><strong>环境变量配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">HADOOP_HOME=/Users/llye/soft/hadoop-3.3.1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">export</span> PATH=<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$PATH</span></span></span><br><span class="line">vi ~/.bash_profile </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生效</span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">hadoop version</span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd $HADOOP_HOME/etc/hadoop</span><br></pre></td></tr></table></figure><p><code>vi core-site.xml</code>编辑内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置分布式文件系统的schema和ip以及port,默认8020--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>vi hdfs-site.xml</code>编辑内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置副本数，注意，伪分布模式只能是1。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>vi hadoop-env.sh</code>编辑内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_301.jdk/Contents/Home</span><br></pre></td></tr></table></figure><p><code>vi mapred-site.xml</code>编辑内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>vi yarn-site.xml</code>编辑内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ssh免密码登录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br><span class="line">cat ~/.ssh/id_rsa.pub&gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 0600~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>以前安装其他软件已操作过，所以此步骤忽略</p><p><strong>格式化namenode</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><p>忽略<code>SHUTDOWN_MSG: Shutting down NameNode at localhost/127.0.0.1</code></p><p>有<code>INFO common.Storage: Storage directory /tmp/hadoop-llye/dfs/name has been successfully formatted.</code>即说明操作成功。</p><p><strong>启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HADOOP_HOME/sbin/start-dfs.sh &amp;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HADOOP_HOME/sbin/start-yarn.sh</span></span><br></pre></td></tr></table></figure><p><strong>验证</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@localhost hadoop % jps</span><br><span class="line">11440 </span><br><span class="line">11169 </span><br><span class="line">74514 NameNode # 名称节点</span><br><span class="line">74756 SecondaryNameNode</span><br><span class="line">74999 ResourceManager</span><br><span class="line">75098 NodeManager</span><br><span class="line">75834 Jps</span><br><span class="line">19771 Launcher</span><br><span class="line">74620 DataNode  # 数据节点</span><br></pre></td></tr></table></figure><p><strong>访问UI：ip+port</strong></p><p>All Applications：<code>http://localhost:8088/cluster/apps</code></p><p>Applications running on this node：<code>http://localhost:8042/node/allApplications</code><br><img src="https://i.328888.xyz/2023/03/15/JCU0J.png" alt="JCU0J.png"></p><p>Browse Hdfs：<code>http://localhost:9870/</code><br><img src="https://i.328888.xyz/2023/03/15/J0HkZ.png" alt="J0HkZ.png"></p><p>这里需要注意的是，因为安装的是3.x版本，所以端口号为9870</p><p>若安装的是2.x版本，则端口号为50070</p><p><img src="https://i.328888.xyz/2023/03/15/J0ehd.png" alt="J0ehd.png"></p><p><strong>测试程序</strong></p><ul><li><p>测试一</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $HADOOP_HOME</span><br><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.1.jar pi 2 100</span><br></pre></td></tr></table></figure></li><li><p>测试二</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cd $HADOOP_HOME</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个hdfs目录</span></span><br><span class="line">hdfs dfs -mkdir /wordcount</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">造数据</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hello hadoop</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hello world</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hello hadoop</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hello hangzhou</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hello hangzhou</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hello hadoop</span></span><br><span class="line">mkdir wordCount</span><br><span class="line">cd wordCount</span><br><span class="line">touch wc.input</span><br><span class="line">vi wc.input</span><br><span class="line">cat wc.input</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传本地文件到指定目录</span></span><br><span class="line">hdfs dfs -put wc.input /wordcount</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行mr程序</span></span><br><span class="line">cd $HADOOP_HOME</span><br><span class="line">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.1.jar wordcount /wordcount/ /wordcount/output</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看mr计算结果</span></span><br><span class="line">hadoop fs -cat /wordcount/output/part-r-00000</span><br></pre></td></tr></table></figure></li></ul><p><strong>停止</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HADOOP_HOME/sbin/stop-dfs.sh &amp;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HADOOP_HOME/sbin/stop-yarn.sh</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;参考文章&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/68748400&quot;&gt;Hive源码系列（一）hive2.1.1+hadoop2.7.3环境搭建&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="hadoop" scheme="https://llye-hub.github.io/categories/hadoop/"/>
    
    
    <category term="hadoop安装" scheme="https://llye-hub.github.io/tags/hadoop%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>终端常用命令汇总</title>
    <link href="https://llye-hub.github.io/posts/84fddb38.html"/>
    <id>https://llye-hub.github.io/posts/84fddb38.html</id>
    <published>2023-03-15T02:29:05.000Z</published>
    <updated>2023-03-15T07:42:14.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取本机ip地址"><a href="#获取本机ip地址" class="headerlink" title="获取本机ip地址"></a>获取本机ip地址</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">local_ip=`ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk &#x27;&#123;print $2&#125;&#x27;|tr -d &quot;addr:&quot;​`</span><br><span class="line">echo &quot;$&#123;local_ip&#125;&quot;</span><br><span class="line"></span><br><span class="line">ifconfig -a        //和window下执行此命令一样道理，返回本机所有ip信息</span><br><span class="line">grep inet    //截取包含ip的行</span><br><span class="line">grep -v 127.0.0.1//去掉本地指向的那行</span><br><span class="line">grep -v inet6//去掉包含inet6的行</span><br><span class="line">awk &#123; print $2&#125;//$2 表示默认以空格分割的第二组 同理 $1表示第一组​</span><br><span class="line">tr -d &quot;addr:&quot;//删除&quot;addr:&quot;这个字符串</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/finghting321/article/details/108476650">https://blog.csdn.net/finghting321/article/details/108476650</a></p><h1 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -iname $filename 2&gt;  /dev/null</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;获取本机ip地址&quot;&gt;&lt;a href=&quot;#获取本机ip地址&quot; class=&quot;headerlink&quot; title=&quot;获取本机ip地址&quot;&gt;&lt;/a&gt;获取本机ip地址&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="shell" scheme="https://llye-hub.github.io/categories/shell/"/>
    
    
    <category term="shell命令" scheme="https://llye-hub.github.io/tags/shell%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>终端免密登录mysql</title>
    <link href="https://llye-hub.github.io/posts/b31f5f52.html"/>
    <id>https://llye-hub.github.io/posts/b31f5f52.html</id>
    <published>2023-03-14T07:29:49.000Z</published>
    <updated>2023-03-14T08:04:15.277Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料：<a href="https://aijishu.com/a/1060000000088457">Mysql Shell免密登录的思考及实际应用案例</a></p><p>常见终端登录mysql的方式是通过命令<code>mysql -u&#123;user&#125; -p&#123;password&#125;</code>，每次登录都需要输入一长串命令和参数，我觉得麻烦，且这种方式下密码直接暴露出来是不安全的</p><p>虽然也可用命令<code>mysql -u&#123;user&#125; -p</code> + 手动输入密码，也是麻烦的，而且还要记密码</p><p>所以，如果仅用命令<code>mysql</code>即可实现登录，那得多方便</p><p>从网上搜索后发现，可以通过明文配置文件的方式实现mysql免密登录</p><p>具体命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑配置文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[mysql]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">user=xxx</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">password=xxx</span></span><br><span class="line">sudo vi /etc/my.cnf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看文件内容</span></span><br><span class="line">cat  /etc/my.cnf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定mysql server仅从这个配置文件读取参数</span></span><br><span class="line">mysql --defaults-file=/etc/my.cnf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证读取配置情况</span></span><br><span class="line">mysql --defaults-file=/etc/my.cnf --print-defaults</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/03/14/9EVXa.png" alt="9EVXa.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考资料：&lt;a href=&quot;https://aijishu.com/a/1060000000088457&quot;&gt;Mysql Shell免密登录的思考及实际应用案例&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;常见终端登录mysql的方式是通过命令&lt;code&gt;mysql -u&amp;#123;user&amp;#1</summary>
      
    
    
    
    <category term="shell" scheme="https://llye-hub.github.io/categories/shell/"/>
    
    
    <category term="免密登录" scheme="https://llye-hub.github.io/tags/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>sql练习之连续登录问题</title>
    <link href="https://llye-hub.github.io/posts/67cc9ac.html"/>
    <id>https://llye-hub.github.io/posts/67cc9ac.html</id>
    <published>2023-03-10T08:22:38.000Z</published>
    <updated>2023-03-13T02:51:54.944Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5NTc1NzE2OA==&mid=2247484833&idx=1&sn=2a965091ec5ec09fe10185fecbf92779&chksm=fe6c54bec91bdda83229a33ceefb0358f408ed24ac5048eb48dbe6911b795b1536971a98ab57&scene=21#wechat_redirect">题目来源</a></p><h1 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h1><p>求出连续3天登录的用户id</p><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> if <span class="keyword">not</span> <span class="keyword">exists</span> one.user_login(</span><br><span class="line">     id <span class="type">int</span> COMMENT <span class="string">&#x27;用户主键&#x27;</span>,</span><br><span class="line">     dt <span class="type">varchar</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;登录日期&#x27;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span>  user_login <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;2021-12-12&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span>  user_login <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;2021-12-12&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span>  user_login <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;2021-12-13&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span>  user_login <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;2021-12-14&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span>  user_login <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;2021-12-16&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span>  user_login <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;2021-12-16&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span>  user_login <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;2021-12-19&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span>  user_login <span class="keyword">values</span>(<span class="number">1002</span>,<span class="string">&#x27;2021-12-17&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span>  user_login <span class="keyword">values</span>(<span class="number">1001</span>,<span class="string">&#x27;2021-12-20&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="解法一：自关联"><a href="#解法一：自关联" class="headerlink" title="解法一：自关联"></a>解法一：自关联</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">distinct</span> id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">a.id ,</span><br><span class="line">a.dt <span class="keyword">as</span> dt1 ,</span><br><span class="line">b.dt <span class="keyword">as</span> dt2</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">user_login a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> user_login b <span class="keyword">on</span></span><br><span class="line">a.id <span class="operator">=</span> b.id</span><br><span class="line"><span class="keyword">and</span> (b.dt <span class="keyword">between</span> DATE_SUB(a.dt, <span class="type">interval</span> <span class="number">2</span> <span class="keyword">day</span>) <span class="keyword">and</span> a.dt)</span><br><span class="line">) tmp1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">id,</span><br><span class="line">dt1</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line"><span class="built_in">count</span>(<span class="number">1</span>) <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">)tmp2</span><br><span class="line">;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU5NTc1NzE2OA==&amp;mid=2247484833&amp;idx=1&amp;sn=2a965091ec5ec09fe10185fecbf92779&amp;chksm=fe6c54bec91bdda</summary>
      
    
    
    
    <category term="题集" scheme="https://llye-hub.github.io/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="sql练习" scheme="https://llye-hub.github.io/tags/sql%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SQL之窗口函数的边界</title>
    <link href="https://llye-hub.github.io/posts/5af52219.html"/>
    <id>https://llye-hub.github.io/posts/5af52219.html</id>
    <published>2023-02-28T08:25:40.000Z</published>
    <updated>2023-03-01T07:30:20.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>窗口函数常用于在SQL数据分析计算各种统计指标，也是日常sql开发中常见的函数了，但是最近发现自己在这方面存在一些误解</p><p>比如下面这段sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> col1</span><br><span class="line">    ,<span class="built_in">sum</span>(col2) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> col1 <span class="keyword">order</span> <span class="keyword">by</span> col3) <span class="keyword">as</span> sum1</span><br><span class="line">    ,<span class="built_in">sum</span>(col2) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> col1) <span class="keyword">as</span> sum2</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">VALUES</span>(<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>,<span class="number">4</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>,<span class="number">7</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>,<span class="number">6</span>)) t(col1,col2,col3)) a</span><br></pre></td></tr></table></figure><p>第一眼感觉<code>sum1</code>和<code>sum2</code>字段计算值是一样的，但实际运行出来的结果为(<code>mysql</code>+<code>hiveSQL</code>)</p><table><thead><tr><th>col1</th><th>sum1</th><th>sum2</th></tr></thead><tbody><tr><td>a</td><td>1</td><td>6</td></tr><tr><td>a</td><td>4</td><td>6</td></tr><tr><td>a</td><td>6</td><td>6</td></tr></tbody></table><p>从执行结果上来看，<code>sum1</code>字段为窗口内的累加值，<code>sum2</code>字段值为窗口内所有值之和</p><h1 id="为什么有无order-by差异这么大"><a href="#为什么有无order-by差异这么大" class="headerlink" title="为什么有无order by差异这么大"></a>为什么有无order by差异这么大</h1><p>有人会说，聚合函数<code>sum()</code>的窗口内有<code>order by</code>子句时，计算结果本就是累加性质。从执行结果上来看，这么说是对的，但是这种解释太流于表面，并没有真正从函数定义上解释为什么</p><p>这里重新回顾下窗口函数基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>window_function<span class="operator">&gt;</span> <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="operator">&lt;</span>column_name<span class="operator">&gt;</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="operator">&lt;</span>column_name<span class="operator">&gt;</span> <span class="operator">&lt;</span>window_frame<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure><p>主要有四个部分：</p><ul><li>window_function：函数，比如：sum、row_number、first_value</li><li>partition by：窗口分区子句</li><li>order by：窗口排序子句</li><li>window_frame：窗口框架，限制窗口的边界大小</li></ul><p>对照基本语法，有<code>order by</code>子句的执行结果就是计算窗口边界为起始行至当前行的<code>sum</code>结果，<br>即<code>sum(col2) over(partition by col1 order by col3)</code><br>等同于<code>sum(col2) over(partition by col1 order by col3 rows between unbounded preceding and current row)</code> </p><h1 id="窗口函数的官方说明"><a href="#窗口函数的官方说明" class="headerlink" title="窗口函数的官方说明"></a>窗口函数的官方说明</h1><p><a href="https://dev.mysql.com/doc/refman/8.0/en/window-functions-frames.html">mysql官方文档</a> </p><p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+WindowingAndAnalytics#LanguageManualWindowingAndAnalytics-PARTITIONBYwithonepartitioningcolumn,noORDERBYorwindowspecification">hive官方文档</a></p><p><code>mysql</code>关于窗口函数的window_frame有如下说明：<br><img src="https://i.328888.xyz/2023/03/01/6DIOt.png" alt="6DIOt.png"></p><p><code>hive</code>关于窗口函数的window_frame有如下说明：<br><img src="https://i.328888.xyz/2023/03/01/6DNeJ.png" alt="6DNeJ.png"></p><p>根据以上官方说明可知，<br>当<code>window_frame</code>子句和<code>order by</code>子句都没有时，窗口计算默认包含窗口内的所有数据，即<code>window_frame=ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING</code>；<br>当仅有<code>order by</code>子句，没有<code>window_frame</code>子句时，窗口计算默认仅包含排序后起始行至当前行的数据，即<code>window_frame=ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;窗口函数常用于在SQL数据分析计算各种统计指标，也是日常sql开发中常见的函数了，但是最近发现自己在这方面存在一些误解&lt;/p&gt;
&lt;p&gt;比如下</summary>
      
    
    
    
    <category term="SQL" scheme="https://llye-hub.github.io/categories/SQL/"/>
    
    
    <category term="窗口函数" scheme="https://llye-hub.github.io/tags/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于Java PriorityQueue类的使用场景</title>
    <link href="https://llye-hub.github.io/posts/76a5661e.html"/>
    <id>https://llye-hub.github.io/posts/76a5661e.html</id>
    <published>2023-02-23T08:53:35.000Z</published>
    <updated>2023-03-10T08:21:11.249Z</updated>
    
    <content type="html"><![CDATA[<p>最近在leetcode刷题的时候，发现很多题推荐解法是用<strong>优先队列</strong>的特性，比如：<a href="https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">滑动窗口的最大值</a> 、<a href="https://leetcode.cn/problems/chou-shu-lcof/">丑数</a></p><p>以前完全没有用个这个类，所以在此整理一下对优先队列的认识和刷题场景</p><h1 id="优先队列的特性"><a href="#优先队列的特性" class="headerlink" title="优先队列的特性"></a>优先队列的特性</h1><p>很明显，优先队列也是一种队列，只不过其出队顺序和一般队列不同，优先队列的出队顺序是按照一定的优先级来的，也就是说出队规则可以随意定制</p><p>优先队列ADT是一种数据结构，它支持插入、删除最小值操作（返回并删除最小元素）、删除最大值操作（返回并删除最大元素）</p><p>优先队列的主要操作：优先队列是元素的容器，每个元素有一个相关的键值</p><ul><li>insert(key, data)：插入键值为key的数据到优先队列中，元素以其key进行排序</li><li>deleteMin&#x2F;deleteMax：删除并返回最小&#x2F;最大键值的元素</li><li>getMinimum&#x2F;getMaximum：返回最小&#x2F;最大剑指的元素，但不删除它</li></ul><p>优先队列的辅助操作：</p><ul><li>第k最小&#x2F;第k最大：返回优先队列中键值为第k个最小&#x2F;最大的元素</li><li>大小（size）：返回优先队列中的元素个数</li><li>堆排序（Heap Sort）：基于键值的优先级将优先队列中的元素进行排序</li></ul><p>在某些场景下，比如要求队列中的最小元素先出即可用优先队列，在java中的实现类为<code>java.util.PriorityQueue</code>。</p><h1 id="认识下PriorityQueue类的方法"><a href="#认识下PriorityQueue类的方法" class="headerlink" title="认识下PriorityQueue类的方法"></a>认识下PriorityQueue类的方法</h1><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认情况下，优先级队列的头是队列中最小的元素，元素将按升序从队列中移除</span></span><br><span class="line">PriorityQueue&lt;Integer&gt; nums = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 借助 Comparator 接口自定义元素的顺序，头是队列中最大的元素，按降序从队列中移除</span></span><br><span class="line">PriorityQueue&lt;<span class="type">int</span>[]&gt; win = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;<span class="type">int</span>[]&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span>[] b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>] != b[<span class="number">0</span>] ? b[<span class="number">0</span>] - a[<span class="number">0</span>] : b[<span class="number">1</span>] - a[<span class="number">1</span>];</span><br><span class="line">        &#125;&#125;);</span><br></pre></td></tr></table></figure><h2 id="插入元素：add、offer"><a href="#插入元素：add、offer" class="headerlink" title="插入元素：add、offer"></a>插入元素：add、offer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建优先队列</span></span><br><span class="line">PriorityQueue&lt;Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用add()方法，如果队列已满，则会引发异常</span></span><br><span class="line">numbers.add(<span class="number">4</span>);</span><br><span class="line">numbers.add(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;PriorityQueue: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用offer()方法，如果队列已满，则返回false</span></span><br><span class="line">numbers.offer(<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;更新后的PriorityQueue: &quot;</span> + numbers);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输出结果：</span></span><br><span class="line"><span class="comment"> * PriorityQueue: [2, 4]</span></span><br><span class="line"><span class="comment"> * 更新后的PriorityQueue: [1, 4, 2]</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 以上结果中，队列的头是最小元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="访问元素：peek"><a href="#访问元素：peek" class="headerlink" title="访问元素：peek"></a>访问元素：peek</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用 peek() 方法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> nums.peek();</span><br><span class="line">System.out.println(<span class="string">&quot;访问元素: &quot;</span> + number);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输出结果：</span></span><br><span class="line"><span class="comment"> * 访问元素: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="删除元素：remove、poll"><a href="#删除元素：remove、poll" class="headerlink" title="删除元素：remove、poll"></a>删除元素：remove、poll</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用remove()方法，从队列中删除指定的元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> numbers.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素2是否已删除? &quot;</span> + result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用poll()方法，返回并删除队列的头</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> numbers.poll();</span><br><span class="line">System.out.println(<span class="string">&quot;使用poll()删除的元素: &quot;</span> + number);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输出结果：</span></span><br><span class="line"><span class="comment"> * 元素2是否已删除? true</span></span><br><span class="line"><span class="comment"> * 使用poll()删除的元素: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="是否包含元素：contains"><a href="#是否包含元素：contains" class="headerlink" title="是否包含元素：contains"></a>是否包含元素：contains</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用contains()方法，从队列中搜索指定的元素，找到则返回true，否则false。</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> numbers.contains(<span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;队列中是否有元素 4 ？&quot;</span> + result);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 输出结果：</span></span><br><span class="line"><span class="comment"> * 队列中是否有元素 4 ？ true</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="刷题场景"><a href="#刷题场景" class="headerlink" title="刷题场景"></a>刷题场景</h1><h2 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a><a href="https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">滑动窗口的最大值</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。 </span></span><br><span class="line"><span class="comment">//示例: </span></span><br><span class="line"><span class="comment">//输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3</span></span><br><span class="line"><span class="comment">//输出: [3,3,5,5,6,7] </span></span><br><span class="line"><span class="comment">//解释:</span></span><br><span class="line"><span class="comment">//  滑动窗口的位置                最大值</span></span><br><span class="line"><span class="comment">//---------------               -----</span></span><br><span class="line"><span class="comment">//[1  3  -1] -3  5  3  6  7       3</span></span><br><span class="line"><span class="comment">// 1 [3  -1  -3] 5  3  6  7       3</span></span><br><span class="line"><span class="comment">// 1  3 [-1  -3  5] 3  6  7       5</span></span><br><span class="line"><span class="comment">// 1  3  -1 [-3  5  3] 6  7       5</span></span><br><span class="line"><span class="comment">// 1  3  -1  -3 [5  3  6] 7       6</span></span><br><span class="line"><span class="comment">// 1  3  -1  -3  5 [3  6  7]      7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解题思路：利用优先队列的特性，规定堆顶元素就是窗口最大值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">PriorityQueue&lt;<span class="type">int</span>[]&gt; win = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;<span class="type">int</span>[]&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line"><span class="comment">// 重新定义出队规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span>[] b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a[<span class="number">0</span>] != b[<span class="number">0</span>] ? b[<span class="number">0</span>] - a[<span class="number">0</span>] : b[<span class="number">1</span>] - a[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 初始化窗口</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">win.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nums[i], i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建指定长度的结果数组</span></span><br><span class="line"><span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[len-k+<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 第一个窗口的最大值</span></span><br><span class="line">res[<span class="number">0</span>] = win.peek()[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 遍历滑动窗口</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; len; ++i) &#123;</span><br><span class="line"><span class="comment">// 添加新元素</span></span><br><span class="line">win.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nums[i], i&#125;);</span><br><span class="line"><span class="comment">// 删除窗口长度外的元素</span></span><br><span class="line"><span class="keyword">while</span> (win.peek()[<span class="number">1</span>] &lt;= i - k) &#123;</span><br><span class="line">win.poll();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回当前窗口的最大值</span></span><br><span class="line">res[i - k + <span class="number">1</span>] = win.peek()[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a><a href="https://leetcode.cn/problems/chou-shu-lcof/">丑数</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</span></span><br><span class="line"><span class="comment">// 示例: </span></span><br><span class="line"><span class="comment">// 输入: n = 10</span></span><br><span class="line"><span class="comment">// 输出: 12</span></span><br><span class="line"><span class="comment">// 解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。 </span></span><br><span class="line"><span class="comment">// 说明:</span></span><br><span class="line"><span class="comment">// 1 是丑数。 </span></span><br><span class="line"><span class="comment">// n 不超过1690。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 解题思路：最小堆，需借助java的PriorityQueue类的特性实现：https://www.cainiaojc.com/java/java-priorityqueue.html</span></span><br><span class="line"><span class="comment"> * 初始化堆，将最小丑数1放入堆</span></span><br><span class="line"><span class="comment"> * 每次取出堆顶元素x，x元素也是堆中最小的丑数，需排除重复元素，依次将 2x,3x,5x 加入堆</span></span><br><span class="line"><span class="comment"> * 第n次取出的堆顶元素就是第n个丑数</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nthUglyNumber</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] factors = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">PriorityQueue&lt;Long&gt; heap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Long&gt;();   <span class="comment">//优先级队列的头是队列中最小的元素</span></span><br><span class="line">heap.offer(<span class="number">1L</span>);     <span class="comment">// 初始化最小堆，放入最小丑数1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">ugly</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">cur</span> <span class="operator">=</span> heap.poll();     <span class="comment">//返回并删除队列的头，即最小元素</span></span><br><span class="line">ugly = (<span class="type">int</span>) cur;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> factor : factors)&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">next</span> <span class="operator">=</span> cur*factor;</span><br><span class="line"><span class="comment">//检查是否有重复元素</span></span><br><span class="line"><span class="keyword">if</span>(!heap.contains(next))&#123;</span><br><span class="line">heap.offer(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ugly;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/39615266">数据结构与算法(4)——优先队列和堆</a> </p><p><a href="https://www.cainiaojc.com/java/java-priorityqueue.html">Java PriorityQueue</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在leetcode刷题的时候，发现很多题推荐解法是用&lt;strong&gt;优先队列&lt;/strong&gt;的特性，比如：&lt;a href=&quot;https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/&quot;&gt;滑动</summary>
      
    
    
    
    <category term="题集" scheme="https://llye-hub.github.io/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="java" scheme="https://llye-hub.github.io/tags/java/"/>
    
    <category term="数据结构" scheme="https://llye-hub.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>hive、Spark和Maxcompute的SQL语法对比分析</title>
    <link href="https://llye-hub.github.io/posts/e6b1209.html"/>
    <id>https://llye-hub.github.io/posts/e6b1209.html</id>
    <published>2023-02-21T02:33:16.000Z</published>
    <updated>2023-02-22T06:42:32.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="having-差异"><a href="#having-差异" class="headerlink" title="having 差异"></a>having 差异</h1><h4 id="差异点"><a href="#差异点" class="headerlink" title="差异点"></a>差异点</h4><p>hive和spark支持窗口函数后带having<br>maxcomputer 的having语法只支持 在 group 和 distinct 后使用</p><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_id</span><br><span class="line">,<span class="built_in">sum</span>(trd_amt) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> province) <span class="keyword">as</span> trd_amt_std</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">order</span></span><br><span class="line"><span class="keyword">having</span> trd_amt_std<span class="operator">&gt;</span><span class="number">0</span></span><br></pre></td></tr></table></figure><p>以上sql在hive中可以运行，但是在maxcomputer中会提示错误，错误如下：<br><img src="https://i.328888.xyz/2023/02/21/gtHTp.png" alt="gtHTp.png"></p><h4 id="替换方案"><a href="#替换方案" class="headerlink" title="替换方案"></a>替换方案</h4><p>在语句中使用子查询，将having替换为where</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> order_id</span><br><span class="line">,<span class="built_in">sum</span>(trd_amt) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> province) <span class="keyword">as</span> trd_amt_std</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">order</span></span><br><span class="line">) a</span><br><span class="line"><span class="keyword">where</span> a.trd_amt_std<span class="operator">&gt;</span><span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="maxcomputer-cross-join-超过一定条数后，依然会提示笛卡尔积风险"><a href="#maxcomputer-cross-join-超过一定条数后，依然会提示笛卡尔积风险" class="headerlink" title="maxcomputer - cross join 超过一定条数后，依然会提示笛卡尔积风险"></a>maxcomputer - cross join 超过一定条数后，依然会提示笛卡尔积风险</h1><h4 id="差异点-1"><a href="#差异点-1" class="headerlink" title="差异点"></a>差异点</h4><p>hive可以使用 cross join语法来表示笛卡尔积关联<br>maxcomputer 的cross join，在条数超过一定数据量后，会提示笛卡尔积风险</p><h4 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span>,b.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_a</span><br><span class="line">) a</span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_b</span><br><span class="line">) b</span><br></pre></td></tr></table></figure><p>以上sql在hive中可以运行，但是在maxcomputer中会提示错误，错误如下：<br><img src="https://i.328888.xyz/2023/02/22/xfOrA.png" alt="xfOrA.png"></p><h4 id="替换方案-1"><a href="#替换方案-1" class="headerlink" title="替换方案"></a>替换方案</h4><p>在左右笛卡尔积表中新增常量字段，用于关联</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span>,b.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span>,<span class="number">1</span> <span class="keyword">as</span> cro_col <span class="keyword">from</span> table_a</span><br><span class="line">) a</span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span>,<span class="number">1</span> <span class="keyword">as</span> cro_col <span class="keyword">from</span> table_b</span><br><span class="line">) b</span><br><span class="line"><span class="keyword">on</span> a.cro_col<span class="operator">=</span>b.cro_col</span><br></pre></td></tr></table></figure><h1 id="不等值join-差异"><a href="#不等值join-差异" class="headerlink" title="不等值join 差异"></a>不等值join 差异</h1><h4 id="差异点-2"><a href="#差异点-2" class="headerlink" title="差异点"></a>差异点</h4><p>1、spark 支持不等值join语法<br>2、hive 2.2.0版本之前不支持不等值语法，<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Joins">2.2.0及以后支持不等值join语法</a><br><img src="https://i.328888.xyz/2023/02/21/gtrN5.png" alt="gtrN5.png"><br>3、<a href="https://help.aliyun.com/document_detail/73783.html">maxcomputer不支持不等值语法</a><br><img src="https://i.328888.xyz/2023/02/21/gt3h8.png" alt="gt3h8.png"></p><h4 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h4><p>测试sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> table_a <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">as</span> id_a</span><br><span class="line">,<span class="string">&#x27;testa&#x27;</span> <span class="keyword">as</span> value_a</span><br><span class="line"></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">select</span> <span class="number">4</span> <span class="keyword">as</span> id_a</span><br><span class="line">    ,<span class="string">&#x27;testd&#x27;</span> <span class="keyword">as</span> value_a</span><br><span class="line">)</span><br><span class="line">,table_b <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="number">3</span> <span class="keyword">as</span> id_b</span><br><span class="line">,<span class="string">&#x27;testc&#x27;</span> <span class="keyword">as</span> value_b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">select</span> <span class="number">2</span> <span class="keyword">as</span> id_b</span><br><span class="line">    ,<span class="string">&#x27;testb&#x27;</span> <span class="keyword">as</span> value_b</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> table_a.id_a</span><br><span class="line">,table_a.value_a</span><br><span class="line">,table_b.id_b</span><br><span class="line">,table_b.value_b</span><br><span class="line"><span class="keyword">from</span>  table_a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> table_b</span><br><span class="line"><span class="keyword">on</span> table_a.id_a <span class="operator">&lt;</span> table_b.id_b</span><br></pre></td></tr></table></figure><p>sql说明 :该sql准备了两张表table_a和table_b用于连接测试<br>使用left join on语法，但是关联关系使用的是 &lt; 不等值关联符号</p><p><strong>maxcomputer运行结果</strong><br><img src="https://i.328888.xyz/2023/02/22/xfcBz.png" alt="xfcBz.png"><br>maxcomputer会报异常：  FAILED: ODPS-0130071:[15,4] Semantic analysis exception - expect equality expression (i.e., only use ‘&#x3D;’ and ‘AND’) for join condition without mapjoin hint</p><p>提示的是期望join的是等值表达式</p><p><strong>hive1.2.1运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gtmHF.png" alt="gtmHF.png"></p><p>hive会报错： Error while compiling statement: FAILED: SemanticException [Error 10017]: line 15:3 Both left and right aliases encountered in JOIN ‘id_b’</p><p>提示的是在join中遇到左右别名</p><p>不得不说，hive的错误信息有点云里雾里，其实就是不等值join造成的。</p><p><strong>hive2.2.3运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gtpeH.png" alt="gtpeH.png"></p><p>hive 2.2.0+版本顺利得到正确结果</p><p><strong>spark运行结果</strong></p><p><img src="https://i.328888.xyz/2023/02/22/xfGXy.png" alt="xfGXy.png"> </p><p>spark2.3也顺利得到结果</p><h4 id="替换方案-2"><a href="#替换方案-2" class="headerlink" title="替换方案"></a>替换方案</h4><p>针对不等值join的替换方案有两种</p><p>1、针对小表，使用mapjoin，避免join操作</p><p>2、将on的不等值关联语句放入where语句中</p><p>由于mapjoin避免shuffle，性能较好，再可以的情况下，优先使用方案1</p><p><strong>1、针对小表，使用mapjoin，避免join操作</strong><br>maxcomputer中的mapjoin hint语法为： &#x2F;*+ mapjoin(<table_name>) *&#x2F; ，详情请查看<a href="https://help.aliyun.com/document_detail/73785.htm?spm=a2c4g.11186623.0.0.534268c4fHc5iD#concept-bf5-tkb-wdb">mapjoin hint</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> table_a <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">as</span> id_a</span><br><span class="line">,<span class="string">&#x27;testa&#x27;</span> <span class="keyword">as</span> value_a</span><br><span class="line">)</span><br><span class="line">,table_b <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="number">2</span> <span class="keyword">as</span> id_b</span><br><span class="line">,<span class="string">&#x27;testb&#x27;</span> <span class="keyword">as</span> value_b</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> <span class="comment">/*+ mapjoin(table_b) */</span></span><br><span class="line">table_a.id_a</span><br><span class="line">,table_a.value_a</span><br><span class="line">,table_b.id_b</span><br><span class="line">,table_b.value_b</span><br><span class="line"><span class="keyword">from</span>  table_a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> table_b</span><br><span class="line"><span class="keyword">on</span> table_a.id_a<span class="operator">&lt;</span>table_b.id_b</span><br></pre></td></tr></table></figure><p>可以看到，使用mapjoin hint语法后，sql在maxcomputer中运行正确，顺利拿到了预期结果<br><img src="https://i.328888.xyz/2023/02/21/gt79P.png" alt="gt79P.png"></p><p><strong>2、将on的不等值关联语句放入where语句中</strong><br>inner join 比较简单</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> table_a <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">as</span> id_a</span><br><span class="line">,<span class="string">&#x27;testa&#x27;</span> <span class="keyword">as</span> value_a</span><br><span class="line">,<span class="number">1</span> <span class="keyword">as</span> join_col</span><br><span class="line"></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">select</span> <span class="number">4</span> <span class="keyword">as</span> id_a</span><br><span class="line">    ,<span class="string">&#x27;testd&#x27;</span> <span class="keyword">as</span> value_a</span><br><span class="line">    ,<span class="number">1</span> <span class="keyword">as</span> join_col</span><br><span class="line">)</span><br><span class="line">,table_b <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="number">2</span> <span class="keyword">as</span> id_b</span><br><span class="line">,<span class="string">&#x27;testb&#x27;</span> <span class="keyword">as</span> value_b</span><br><span class="line">,<span class="number">1</span> <span class="keyword">as</span> join_col</span><br><span class="line"></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">select</span> <span class="number">3</span> <span class="keyword">as</span> id_b</span><br><span class="line">    ,<span class="string">&#x27;testc&#x27;</span> <span class="keyword">as</span> value_b</span><br><span class="line">    ,<span class="number">1</span> <span class="keyword">as</span> join_col</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">table_a.id_a</span><br><span class="line">,table_a.value_a</span><br><span class="line">,table_b.id_b</span><br><span class="line">,table_b.value_b</span><br><span class="line"><span class="keyword">from</span>  table_a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> table_b</span><br><span class="line"><span class="keyword">on</span> table_a.join_col<span class="operator">=</span>table_b.join_col</span><br><span class="line"><span class="keyword">where</span> table_a.id_a<span class="operator">&lt;</span>table_b.id_b</span><br></pre></td></tr></table></figure><p>可以看到，将&lt;判断语句放入where后，sql在maxcomputer运行正确，顺利拿到了预期结果<br><img src="https://i.328888.xyz/2023/02/21/gteAX.png" alt="gteAX.png"></p><p>left join 比较复杂，建议使用map hint，实在没办法在使用此方案</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> table_a <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">as</span> id_a</span><br><span class="line">,<span class="string">&#x27;testa&#x27;</span> <span class="keyword">as</span> value_a</span><br><span class="line">,<span class="number">1</span> <span class="keyword">as</span> join_col</span><br><span class="line"></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">select</span> <span class="number">4</span> <span class="keyword">as</span> id_a</span><br><span class="line">    ,<span class="string">&#x27;testd&#x27;</span> <span class="keyword">as</span> value_a</span><br><span class="line">    ,<span class="number">1</span> <span class="keyword">as</span> join_col</span><br><span class="line">)</span><br><span class="line">,table_b <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="number">2</span> <span class="keyword">as</span> id_b</span><br><span class="line">,<span class="string">&#x27;testb&#x27;</span> <span class="keyword">as</span> value_b</span><br><span class="line">,<span class="number">1</span> <span class="keyword">as</span> join_col</span><br><span class="line"></span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">select</span> <span class="number">3</span> <span class="keyword">as</span> id_b</span><br><span class="line">    ,<span class="string">&#x27;testc&#x27;</span> <span class="keyword">as</span> value_b</span><br><span class="line">    ,<span class="number">1</span> <span class="keyword">as</span> join_col</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 能关联上的部分</span></span><br><span class="line">,join_part <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">table_a.id_a</span><br><span class="line">,table_a.value_a</span><br><span class="line">,table_b.id_b</span><br><span class="line">,table_b.value_b</span><br><span class="line"><span class="keyword">from</span>  table_a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> table_b</span><br><span class="line"><span class="keyword">on</span> table_a.join_col<span class="operator">=</span>table_b.join_col</span><br><span class="line"><span class="keyword">where</span> table_a.id_a<span class="operator">&lt;</span>table_b.id_b</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 以自己为主表，left join能关联上的部分，实现 left join不等值效果</span></span><br><span class="line"><span class="keyword">select</span> table_a.id_a</span><br><span class="line">,table_a.value_a</span><br><span class="line">,join_part.id_b</span><br><span class="line">,join_part.value_b</span><br><span class="line"><span class="keyword">from</span>  table_a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> join_part</span><br><span class="line"><span class="keyword">on</span> table_a.id_a<span class="operator">=</span>join_part.id_a</span><br></pre></td></tr></table></figure><p>可以看到，将&lt;判断语句放入where后，sql在maxcomputer运行正确，顺利拿到了预期结果<br><img src="https://i.328888.xyz/2023/02/21/gt6hJ.png" alt="gt6hJ.png"></p><h1 id="array-contains-差异"><a href="#array-contains-差异" class="headerlink" title="array_contains 差异"></a>array_contains 差异</h1><h4 id="差异点-3"><a href="#差异点-3" class="headerlink" title="差异点"></a>差异点</h4><p>spark的array_contains支持类型的隐式转换<br>hive和maxcomputer array_contains不支持，只支持同类型使用</p><h4 id="举例-3"><a href="#举例-3" class="headerlink" title="举例"></a>举例</h4><p>测试sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> array_contains(split(&quot;1,2,3,4&quot;,&quot;,&quot;),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>sql说明</strong><br>该sql首先使用split一个字符串获取一个array对象用于测试，之后使用array_contains函数进行判断<br>split后的array对象为一个string数组，而判断被包含的数字【1】为一个int 对象</p><p><strong>maxcomputer运行结果</strong><br><img src="https://i.328888.xyz/2023/02/22/xf5D8.png" alt="xf5D8.png"><br>maxcomputer会报异常：  FAILED: ODPS-0130071:[1,44] Semantic analysis exception - invalid type INT of argument 2 for function array_contains, expect STRING, implicit conversion is not allowed</p><p>提示的是array_contains第二个参数期望的是string，但是传入的是int，隐式类型转换不支持</p><p><strong>hive运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gtdOA.png" alt="gtdOA.png"></p><p>hive会报错： Error while compiling statement: FAILED: SemanticException [Error 10016]: line 1:43 Argument type mismatch ‘1’: “string” expected at function ARRAY_CONTAINS, but “int” is found</p><p>提示的是array_contains函数期望的是string，但是传入的是int，类型不匹配</p><p><strong>spark运行结果</strong></p><p><img src="https://i.328888.xyz/2023/02/22/xf1DJ.png" alt="xf1DJ.png"></p><p>spark能顺利产出结果，结果为true，那么为什么spark可以成功呢？</p><p>大概率是spark智能的将1从int转换为了string类型，使得类型得以匹配，通过explain查看物理执行计划来验证</p><p><img src="https://i.328888.xyz/2023/02/21/gtJAq.png" alt="gtJAq.png"></p><p>在上图标红的地方可以看到，spark在物理执行计划层面，将int的1隐式的转换为了string类型，验证了我们一开始的猜想。</p><h4 id="替换方案-3"><a href="#替换方案-3" class="headerlink" title="替换方案"></a>替换方案</h4><p>既然知道了在hive和maxcomputer中是类型不匹配导致的array_contains函数报错，那么只需要显示的将类型进行转换即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> array_contains(split(&quot;1,2,3,4&quot;,&quot;,&quot;),<span class="built_in">cast</span>(<span class="number">1</span> <span class="keyword">as</span> string))</span><br></pre></td></tr></table></figure><h1 id="字段类型转换-ARRAY-lt-gt-to-STRING"><a href="#字段类型转换-ARRAY-lt-gt-to-STRING" class="headerlink" title="字段类型转换 ARRAY&lt;&gt; to STRING"></a>字段类型转换 ARRAY&lt;&gt; to STRING</h1><h4 id="差异点-4"><a href="#差异点-4" class="headerlink" title="差异点"></a>差异点</h4><p>spark的array_contains支持类型的隐式转换</p><p>hive和maxcomputer array_contains不支持，只支持同类型使用</p><h4 id="举例-4"><a href="#举例-4" class="headerlink" title="举例"></a>举例</h4><p>测试sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="keyword">as</span> string) <span class="keyword">as</span> array_to_string;</span><br></pre></td></tr></table></figure><p><strong>maxcompute运行结果</strong></p><p><img src="https://i.328888.xyz/2023/02/22/xfQ3c.png" alt="xfQ3c.png"></p><p>maxcompute报异常：FAILED: ODPS-0130141:[1,8] Illegal implicit type cast - cannot cast from ARRAY<INT> to STRING</p><p>提示的是 ARRAY&lt;&gt;类型字段  不能强制转换为 STRING 类型</p><p><strong>hive运行结果</strong></p><p><img src="https://i.328888.xyz/2023/02/22/xyi6V.png" alt="xyi6V.png"></p><p>hive报异常：SQL语义错误: Error while compiling statement: FAILED: ClassCastException org.apache.hadoop.hive.serde2.typeinfo.ListTypeInfo cannot be cast to org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo</p><p>提示的是不同类型不能强转</p><p><strong>spark运行结果</strong></p><p><img src="https://i.328888.xyz/2023/02/21/gtPZa.png" alt="gtPZa.png"></p><p>spark能顺利产出结果</p><p><strong>替换方案</strong><br>使用 <a href="https://help.aliyun.com/document_detail/293597.htm?spm=a2c4g.11186623.0.0.5be36f60Wo6eDb#section-pc4-90e-0rl">array_join函数</a> 将array的元素拼接成字符串，再在首尾加上 ‘[ ‘ 和 ‘]’ 字符可以还原spark上的运行结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;[&#x27;</span>,array_join(<span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),<span class="string">&#x27;,&#x27;</span>),<span class="string">&#x27;]&#x27;</span>) <span class="keyword">as</span> array_to_string;</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/02/21/gtTOx.png" alt="gtTOx.png"></p><p>📢注意<br>macxcompute的array_join函数默认会忽略null元素，可在array_join函数中设置 nullreplacement 参数替代NULL元素<br><img src="https://i.328888.xyz/2023/02/21/gtazk.png" alt="gtazk.png"><br><img src="https://i.328888.xyz/2023/02/21/gt1aL.png" alt="gt1aL.png"></p><h1 id="日期格式to-date-‘xxx’-’yyyyMMddHHmmss’"><a href="#日期格式to-date-‘xxx’-’yyyyMMddHHmmss’" class="headerlink" title="日期格式to_date(‘xxx’,’yyyyMMddHHmmss’)"></a>日期格式to_date(‘xxx’,’yyyyMMddHHmmss’)</h1><h4 id="差异点-5"><a href="#差异点-5" class="headerlink" title="差异点"></a>差异点</h4><p>hive语法中，to_date函数用法为：to_date(string timestamp)，返回DATE类型，格式为 yyyy-mm-dd ，仅有一个参数，支持用format格式解析</p><p>spark语法中，to_date函数用法为：to_date(date_str[, fmt]) ，返回DATE类型，格式为 yyyy-mm-dd ，支持用format格式解析日期</p><p>maxcompute语法中，to_date函数用法为：to_date(string <date>, string <format>)，返回DATETIME类型，格式为 yyyy-mm-dd hh:mi:ss ，支持用format格式解析日期</p><p>📢这里要注意的是，虽然spark和maxcompute中，to_date函数都支持用format格式解析日期，format格式是有差异的，主要表现在 分钟 位的格式</p><p>spark的format格式：yyyy为4位数的年，MM为2位数的月，dd为2位数的日，HH为24小时制的时，mm为2位数的分钟，ss为2位数的秒，ff3为3位精度毫秒<br>maxcompute的format格式：yyyy为4位数的年，mm为2位数的月，dd为2位数的日，hh为24小时制的时，mi为2位数的分钟，ss为2位数的秒，ff3为3位精度毫秒</p><h4 id="举例-5"><a href="#举例-5" class="headerlink" title="举例"></a>举例</h4><p>测试sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> to_date(<span class="string">&#x27;20221118123456&#x27;</span>,<span class="string">&#x27;yyyyMMddHHmmss&#x27;</span>),to_date(<span class="string">&#x27;2022-11-18 12:34:56&#x27;</span>,<span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>maxcompute运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gtY0p.png" alt="gtY0p.png"></p><p>maxcompute报异常： FAILED: ODPS-0121095:Invalid arguments - format string has second part, but doesn’t have minute part : yyyyMMddHHmmss</p><p><strong>hive运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gtqXU.png" alt="gtqXU.png"></p><p>hive报异常： Arguments length mismatch ‘’yyyyMMddhhmmss’’: to_date() requires 1 argument, got 2</p><p>提示的是to_date函数仅有1个参数</p><p>去掉format参数后的运行结果为：<br><img src="https://i.328888.xyz/2023/02/21/gtuJv.png" alt="gtuJv.png"></p><p>从结果可以看到，to_date不能解析 yyyyMMddhhmmss 和 yyyyMMdd 格式</p><p><strong>spark运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gWiD3.png" alt="gWiD3.png"></p><p>spark能顺利产出结果</p><h4 id="替换方案-4"><a href="#替换方案-4" class="headerlink" title="替换方案"></a>替换方案</h4><p>format格式修改：yyyy为4位数的年，mm为2位数的月，dd为2位数的日，hh为24小时制的时，mi为2位数的分钟，ss为2位数的秒，ff3为3位精度毫秒</p><p>修改后的能正常产出结果：<br><img src="https://i.328888.xyz/2023/02/21/gW4i8.png" alt="gW4i8.png"></p><p>另，常见使用to_date报错sql为 date_format(date_add(to_date(pay_time,’yyyyMMddHHmmss’),2),’yyyyMMddHHmmss’) ，解读sql的作用是对 pay_time 加 2 天，建议用 UDF 修改这段sql为 yt_date_add(pay_time,2)，修改后简洁明了</p><h1 id="date日期函数"><a href="#date日期函数" class="headerlink" title="date日期函数"></a>date日期函数</h1><h4 id="差异点-6"><a href="#差异点-6" class="headerlink" title="差异点"></a>差异点</h4><p>spark和hive的date函数支持将标准的日期string转换为date类型</p><p>maxcomputer date函数只支持标准的日期string，带时分秒的时间string不支持</p><h4 id="举例-6"><a href="#举例-6" class="headerlink" title="举例"></a>举例</h4><p>测试sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">date</span>(<span class="string">&#x27;2022-12-21&#x27;</span>),<span class="type">date</span>(<span class="string">&#x27;2022-12-21 01:22:01&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>maxcompute运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gWt0Q.png" alt="gWt0Q.png"></p><p>maxcomputer对标准的日期string【2022-12-21】转换正确</p><p>但是对带时分秒的string转为错误，直接为null</p><p><strong>hive运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gWWXE.png" alt="gWWXE.png"></p><p>结果符合预期</p><p><strong>spark运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gWkKC.png" alt="gWkKC.png"></p><p>spark能顺利产出结果</p><h4 id="替换方案-5"><a href="#替换方案-5" class="headerlink" title="替换方案"></a>替换方案</h4><p>如果是为了格式转换，使用自定义 yt_date_format 函数</p><p>如果是为了获取date类型，使用 to_date函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> yt_date_format(<span class="string">&#x27;2022-12-21 01:22:01&#x27;</span>,<span class="string">&#x27;yyyy-MM-dd&#x27;</span>)</span><br><span class="line">,to_date(<span class="string">&#x27;2022-12-21 01:22:01&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/02/21/gWCDP.png" alt="gWCDP.png"></p><h1 id="from-unixtime函数"><a href="#from-unixtime函数" class="headerlink" title="from_unixtime函数"></a>from_unixtime函数</h1><h4 id="差异点-7"><a href="#差异点-7" class="headerlink" title="差异点"></a>差异点</h4><p>spark和hive的from_unixtime函数将时间戳转换成格式化string类型，当时间戳为负数时，正常转换</p><p>maxcomputer from_unixtime函数转换负数时间戳时，存在时间便宜</p><h4 id="举例-7"><a href="#举例-7" class="headerlink" title="举例"></a>举例</h4><p>测试sql<br>select ‘1018-10-15 00:00:00’  – yyyyMMddHHmmss 时间戳<br>,unix_timestamp(‘1018-10-15 00:00:00’) –时间戳<br>,from_unixtime(unix_timestamp(‘1018-10-15 00:00:00’),’yyyyMMddHHmmss’) –转换格式</p><p><strong>maxcompute运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gWHiJ.png" alt="gWHiJ.png"></p><p>可以看到，原先日期为 ‘1018-10-15 00:00:00’,转换成yyyyMMddHHmmss格式原本期望为  10181015000000</p><p>但是实际结果为10181008235417,和预期不符合</p><p><strong>hive运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gWObc.png" alt="gWObc.png"></p><p>hive结果符合预期</p><p><strong>spark运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gWb6A.png" alt="gWb6A.png"></p><p>spark产出结果正确</p><h4 id="替换方案-6"><a href="#替换方案-6" class="headerlink" title="替换方案"></a>替换方案</h4><p>使用自定义 yt_date_format 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;1018-10-15 00:00:00&#x27;</span> <span class="comment">-- yyyyMMddHHmmss 时间戳</span></span><br><span class="line">,unix_timestamp(<span class="string">&#x27;1018-10-15 00:00:00&#x27;</span>) <span class="comment">--时间戳</span></span><br><span class="line">,yt_date_format(<span class="string">&#x27;1018-10-15 00:00:00&#x27;</span>,<span class="string">&#x27;yyyyMMddHHmmss&#x27;</span>) <span class="comment">--转换格式</span></span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/02/21/gWICN.png" alt="gWICN.png"><br>使用自定义udf后正确</p><h1 id="concat-ws差异"><a href="#concat-ws差异" class="headerlink" title="concat_ws差异"></a>concat_ws差异</h1><h4 id="差异点-8"><a href="#差异点-8" class="headerlink" title="差异点"></a>差异点</h4><p>spark的concat_ws会支持类型的隐式转换</p><p>hive和maxcomputer concat_ws不支持，只支持同类型使用</p><h4 id="举例-8"><a href="#举例-8" class="headerlink" title="举例"></a>举例</h4><p>测试sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat_ws(&quot;,&quot;,<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><strong>maxcompute运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gWNgV.png" alt="gWNgV.png"></p><p>报错提示数据类型不对，concat_ws只能处理ARRAY<STRING>数据类型，而sql中是ARRAY<INT>数据类型，<a href="https://help.aliyun.com/document_detail/455513.html?spm=a2c4g.11186623.0.0.28686fd3N35cvE">官方文档</a> 中有详细说明<br><img src="https://i.328888.xyz/2023/02/21/gWmSz.png" alt="gWmSz.png"></p><p><strong>hive运行结果</strong><br><img src="https://i.328888.xyz/2023/02/21/gWBVw.png" alt="gWBVw.png"></p><p>报错提示数据类型不对，与maxcompute一个意思，concat_ws传入数组必须是Array<int>类型</p><p><strong>spark运行结果</strong></p><p><img src="https://i.328888.xyz/2023/02/21/gWXba.png" alt="gWXba.png"></p><p>spark执行结果符合预期</p><h4 id="替换方案-7"><a href="#替换方案-7" class="headerlink" title="替换方案"></a>替换方案</h4><p>使用阿里云提供的array_join函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> array_join(<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),&quot;,&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/02/21/gWegp.png" alt="gWegp.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;having-差异&quot;&gt;&lt;a href=&quot;#having-差异&quot; class=&quot;headerlink&quot; title=&quot;having 差异&quot;&gt;&lt;/a&gt;having 差异&lt;/h1&gt;&lt;h4 id=&quot;差异点&quot;&gt;&lt;a href=&quot;#差异点&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="SQL" scheme="https://llye-hub.github.io/categories/SQL/"/>
    
    
    <category term="Maxcompute" scheme="https://llye-hub.github.io/tags/Maxcompute/"/>
    
  </entry>
  
  <entry>
    <title>mysql和hiveSQL的语法差别</title>
    <link href="https://llye-hub.github.io/posts/e912f2da.html"/>
    <id>https://llye-hub.github.io/posts/e912f2da.html</id>
    <published>2023-02-17T08:06:16.000Z</published>
    <updated>2023-03-02T08:18:42.316Z</updated>
    
    <content type="html"><![CDATA[<p>最近在牛客网上刷sql题，但编程语言居然只支持mysql，一些函数用法上与平时工作使用的hiveSQL有较大差别，所以在这篇博客中整理一下两种语法的函数使用差异</p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html">mysql内置函数</a></p><p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF?spm=a2c4g.11186623.0.0.3c267254Ka3fUh#LanguageManualUDF-get_json_object">hive内置函数</a></p><h1 id="日期、时间函数"><a href="#日期、时间函数" class="headerlink" title="日期、时间函数"></a>日期、时间函数</h1><table><thead><tr><th>函数用途</th><th>mysql函数</th><th>mysql用法</th><th>hive函数</th><th>hiveSQL用法</th></tr></thead><tbody><tr><td>日期、时间格式化</td><td>date_format</td><td>date_format(‘2008-08-08 22:23:01’, ‘%Y%m%d%H%i%s’)</td><td>date_format</td><td>date_format(‘2008-08-08 22:23:01’, ‘yyyyMMddHHmmss’)</td></tr><tr><td>日期、时间加</td><td>date_add</td><td>date_add(‘2008-08-08 22:23:01’,interval 1 day&#x2F;hour&#x2F;minute&#x2F;second&#x2F;microsecond&#x2F;week&#x2F;month&#x2F;quarter&#x2F;year)，返回dateTime格式</td><td>date_add</td><td>date_add(‘2008-08-08 22:23:01’,1)，只加days，返回date格式</td></tr><tr><td>日期、时间减</td><td>date_sub</td><td>date_sub(‘2008-08-08 22:23:01’,interval 1 day&#x2F;hour&#x2F;minute&#x2F;second&#x2F;microsecond&#x2F;week&#x2F;month&#x2F;quarter&#x2F;year)，返回dateTime格式</td><td>date_sub</td><td>date_sub(‘2008-08-08 22:23:01’,1)，只加days，返回date格式</td></tr><tr><td>日期相差</td><td>datediff</td><td>datediff(‘2008-08-08 22:22:00’,’2008-08-07 22:23:00’)</td><td>datediff</td><td>datediff(‘2008-08-08 22:22:00’,’2008-08-07 22:23:00’)</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在牛客网上刷sql题，但编程语言居然只支持mysql，一些函数用法上与平时工作使用的hiveSQL有较大差别，所以在这篇博客中整理一下两种语法的函数使用差异&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/</summary>
      
    
    
    
    <category term="SQL" scheme="https://llye-hub.github.io/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://llye-hub.github.io/posts/735e5788.html"/>
    <id>https://llye-hub.github.io/posts/735e5788.html</id>
    <published>2023-02-17T05:46:19.000Z</published>
    <updated>2023-03-10T08:21:11.251Z</updated>
    
    <content type="html"><![CDATA[<p>整理一些数据结构中常用的排序算法原理和java实现</p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在数组中找到一个基准值<code>t</code>，将小于<code>t</code>的值放它前面，大于<code>t</code>的值放它后面，再以此方法对子数组递归进行快速排序</p><h2 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;整理一些数据结构中常用的排序算法原理和java实现&lt;/p&gt;
&lt;h1 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=</summary>
      
    
    
    
    <category term="题集" scheme="https://llye-hub.github.io/categories/%E9%A2%98%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>解题思路之动态规划</title>
    <link href="https://llye-hub.github.io/posts/d6cdfd6a.html"/>
    <id>https://llye-hub.github.io/posts/d6cdfd6a.html</id>
    <published>2023-02-16T09:11:19.000Z</published>
    <updated>2023-03-10T08:21:11.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划"></a>什么是动态规划</h1><p>动态规划，英文：Dynamic Programming，简称DP。<br>简单理解，动态规划的每一个状态都能由上一个状态推导而来</p><h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><p>以斐波那契数列为例，动态规划问题可以拆解为五步曲：</p><p>1、确定dp数组和下标含义：第n个斐波那契数是<code>dp[n]</code></p><p>2、确定递推公式（也可叫状态转移方程）：<code>dp[n] = dp[n-1] + dp[n-2]</code></p><p>3、dp数组初始化：<code>dp[0] = 0; dp[1] = 1</code></p><p>4、确定遍历顺序：从前到后遍历，<code>dp[n]</code>依赖<code>dp[n-1]</code>和<code>dp[n-2]</code></p><p>5、举例推导dp数组：当<code>n=10</code>时，dp数组应该为：<code>0 1 1 2 3 5 8 13 21 34 55</code></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://programmercarl.com/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">代码随想录之动态规划</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是动态规划&quot;&gt;&lt;a href=&quot;#什么是动态规划&quot; class=&quot;headerlink&quot; title=&quot;什么是动态规划&quot;&gt;&lt;/a&gt;什么是动态规划&lt;/h1&gt;&lt;p&gt;动态规划，英文：Dynamic Programming，简称DP。&lt;br&gt;简单理解，动态规划的每一个</summary>
      
    
    
    
    <category term="题集" scheme="https://llye-hub.github.io/categories/%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="LeetCode" scheme="https://llye-hub.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>SparkSQL优化之数据倾斜</title>
    <link href="https://llye-hub.github.io/posts/faab1ad7.html"/>
    <id>https://llye-hub.github.io/posts/faab1ad7.html</id>
    <published>2023-02-09T02:19:52.000Z</published>
    <updated>2023-02-28T08:29:17.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Spark作业优化场景中，最常见且比较棘手的就是数据倾斜问题。个人认为，具备数据倾斜调优能力对从事数仓开发人员是必备的基本要求。当然，数据倾斜的场景是比较复杂的，针对不同的数据倾斜有不同的处理方案。</p><h1 id="如何辨别和定位数据倾斜"><a href="#如何辨别和定位数据倾斜" class="headerlink" title="如何辨别和定位数据倾斜"></a>如何辨别和定位数据倾斜</h1><p>从Spark作业的执行计划看，若出现某个task任务比其他task任务执行耗时极其久，比如：某个stage有100个task，其中99个task在1min左右就执行成功，但是有1个task却执行了1个小时甚至更久，这种情况显然是出现了数据倾斜。</p><p>数据倾斜问题仅出现在shuffle过程，一些会触发shuffle的算子：distinct、groupByKey、reduceByKey、aggregateByKey、countByKey、join、cogroup、repartition等。<br>对应提交的SparkSQL中可能有distinct、count(distinct)、group by、partition by、join等关键词。</p><h1 id="常见的数据倾斜场景及解决方案"><a href="#常见的数据倾斜场景及解决方案" class="headerlink" title="常见的数据倾斜场景及解决方案"></a>常见的数据倾斜场景及解决方案</h1><h1 id="碰到的数据倾斜案例"><a href="#碰到的数据倾斜案例" class="headerlink" title="碰到的数据倾斜案例"></a>碰到的数据倾斜案例</h1><h2 id="窗口分组数据倾斜"><a href="#窗口分组数据倾斜" class="headerlink" title="窗口分组数据倾斜"></a>窗口分组数据倾斜</h2><p><strong>倾斜场景</strong><br>业务上有一张消息记录表msg_records，sql要求是取下一次回复消息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> msg_tmp <span class="keyword">as</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span>  id                  <span class="comment">-- 唯一键，消息id</span></span><br><span class="line">           ,from_chat_id        <span class="comment">-- 消息发送者id</span></span><br><span class="line">           ,to_chat_id          <span class="comment">-- 消息接受者id</span></span><br><span class="line">           ,msg_time            <span class="comment">-- 消息时间</span></span><br><span class="line">    <span class="keyword">from</span> msg_records</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span>  id</span><br><span class="line">       ,msg_time</span><br><span class="line">       ,<span class="built_in">first_value</span>(if(type <span class="operator">=</span> <span class="string">&#x27;reply&#x27;</span>,id,<span class="keyword">null</span>),<span class="literal">true</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> from_chat_id,to_chat_id <span class="keyword">order</span> <span class="keyword">by</span> msg_time,id <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> following <span class="keyword">and</span> unbounded following) <span class="keyword">as</span> reply_msg_id_n1t <span class="comment">-- 取下一次回复消息</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span>  id</span><br><span class="line">           ,from_chat_id</span><br><span class="line">           ,to_chat_id</span><br><span class="line">           ,msg_time</span><br><span class="line">           ,<span class="string">&#x27;send&#x27;</span> <span class="keyword">as</span> type</span><br><span class="line">    <span class="keyword">from</span> msg_tmp</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="comment">-- 调转，取返回消息</span></span><br><span class="line">    <span class="keyword">select</span>  id</span><br><span class="line">           ,to_chat_id   <span class="keyword">as</span> from_chat_id</span><br><span class="line">           ,from_chat_id <span class="keyword">as</span> to_chat_id</span><br><span class="line">           ,msg_time</span><br><span class="line">           ,<span class="string">&#x27;reply&#x27;</span>      <span class="keyword">as</span> type</span><br><span class="line">    <span class="keyword">from</span> msg_tmp</span><br><span class="line">) t1</span><br></pre></td></tr></table></figure><p><strong>sql执行分析</strong><br>有一个task执行耗时1h<br><img src="https://i.328888.xyz/2023/02/10/R2j3w.png" alt="R2j3w.png"></p><p><strong>数据倾斜分析</strong><br>根据窗口函数的分组<code>from_chat_id + to_chat_id</code>分析，数据量出现严重倾斜，表总数据量1亿多，其中，分组<code>from_chat_id=12 and to_chat_id=81867</code>的数据量有30w，其他分组数据量至多3w。</p><p>另外，分组<code>from_chat_id=12 and to_chat_id=81867</code>的数据在业务上可定义为脏数据，且first_value()函数计算出的值全为null。</p><p>经过测试验证发现，没有 <strong>rows between语句</strong> 或是 <strong>过滤倾斜数据</strong> 时，SQL执行很快</p><p>综上分析，再对照spark执行计划基本可以定位倾斜原因为<strong>窗口数据倾斜和rows between计算耗时</strong></p><p><strong>解决方案</strong><br>结合业务知识，在sql逻辑中过滤<code>from_chat_id=12 and to_chat_id=81867</code>的数据</p><p>最终，任务执行耗时从<code>1h</code>优化至<code>10min</code></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://tech.meituan.com/2016/05/12/spark-tuning-pro.html">美团技术团队：Spark性能优化指南——高级篇</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在Spark作业优化场景中，最常见且比较棘手的就是数据倾斜问题。个人认为，具备数据倾斜调优能力对从事数仓开发人员是必备的基本要求。当然，数据</summary>
      
    
    
    
    <category term="SQL" scheme="https://llye-hub.github.io/categories/SQL/"/>
    
    
    <category term="数据倾斜" scheme="https://llye-hub.github.io/tags/%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C/"/>
    
  </entry>
  
  <entry>
    <title>hiveSQL之生成连续数字</title>
    <link href="https://llye-hub.github.io/posts/3ce3d37f.html"/>
    <id>https://llye-hub.github.io/posts/3ce3d37f.html</id>
    <published>2023-02-08T08:03:36.000Z</published>
    <updated>2023-02-20T03:39:51.495Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="sql要求">sql要求</span></h1><p>生成100以内的全部整数</p><h1><span id="涉及udtf函数">涉及udtf函数</span></h1><p><strong>posexplode</strong>(ARRAY&lt;T&gt; a) <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF?spm=a2c4g.11186623.0.0.3c267254Ka3fUh#LanguageManualUDF-posexplode(array)">官方说明</a><br><strong>Return</strong>: Returns a row-set with two columns (pos int,val T), one row for each element from the array.<br><strong>Description</strong>: posexplode() is similar to explode but instead of just returning the elements of the array it returns the element as well as its position in the original array.</p><p><strong>用法示例</strong>：<br>有如下一张表myTable</p><table><thead><tr><th align="center">(array&lt;int&gt;)myCol</th></tr></thead><tbody><tr><td align="center">[100,200,300]</td></tr><tr><td align="center">[400,500,600]</td></tr></tbody></table><p>执行hive sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 造数据</span></span><br><span class="line"><span class="keyword">with</span> myTable <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">array</span>(<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>) <span class="keyword">as</span> myCol</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">array</span>(<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>) <span class="keyword">as</span> myCol</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 查询sql</span></span><br><span class="line"><span class="keyword">SELECT</span> posexplode(myCol) <span class="keyword">AS</span> (pos, val) <span class="keyword">FROM</span> myTable</span><br></pre></td></tr></table></figure><p>得到结果为：</p><table><thead><tr><th align="center">(int)pos</th><th align="center">(int)val</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">100</td></tr><tr><td align="center">1</td><td align="center">200</td></tr><tr><td align="center">2</td><td align="center">300</td></tr><tr><td align="center">0</td><td align="center">400</td></tr><tr><td align="center">1</td><td align="center">500</td></tr><tr><td align="center">2</td><td align="center">600</td></tr></tbody></table><h1><span id="sql实现">sql实现</span></h1><p>借助posexplode返回的pos即可实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> posexplode(split(space(<span class="number">99</span>), <span class="string">&#x27; &#x27;</span>)) <span class="keyword">as</span> (pos, val)</span><br><span class="line"><span class="comment">-- 返回的pos字段即为[0,99]区间的100个整数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或者下面这种写法</span></span><br><span class="line"><span class="keyword">select</span> posexplode(split(repeat(<span class="string">&#x27;,&#x27;</span>,<span class="number">99</span>), <span class="string">&#x27;,&#x27;</span>)) <span class="keyword">as</span> (pos, val)</span><br></pre></td></tr></table></figure><h1><span id="实例场景">实例场景</span></h1><h2><span id="数据重复扩容10倍">数据重复扩容10倍</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 造数据</span></span><br><span class="line"><span class="keyword">with</span> myTable <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="string">&#x27;张三&#x27;</span> <span class="keyword">as</span> name</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">    <span class="keyword">select</span> <span class="string">&#x27;李四&#x27;</span> <span class="keyword">as</span> name</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 将myTable的每行数据重复复制为5行</span></span><br><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line">       ,posexplode(split(space(<span class="number">4</span>), <span class="string">&#x27; &#x27;</span>)) <span class="keyword">AS</span> (pos, val) </span><br><span class="line"><span class="keyword">FROM</span> myTable</span><br></pre></td></tr></table></figure><p>得到结果为：</p><table><thead><tr><th align="center">name</th><th align="center">pos</th><th align="center">val</th></tr></thead><tbody><tr><td align="center">张三</td><td align="center">0</td><td align="center"></td></tr><tr><td align="center">张三</td><td align="center">1</td><td align="center"></td></tr><tr><td align="center">张三</td><td align="center">2</td><td align="center"></td></tr><tr><td align="center">张三</td><td align="center">3</td><td align="center"></td></tr><tr><td align="center">张三</td><td align="center">4</td><td align="center"></td></tr><tr><td align="center">李四</td><td align="center">0</td><td align="center"></td></tr><tr><td align="center">李四</td><td align="center">1</td><td align="center"></td></tr><tr><td align="center">李四</td><td align="center">2</td><td align="center"></td></tr><tr><td align="center">李四</td><td align="center">3</td><td align="center"></td></tr><tr><td align="center">李四</td><td align="center">4</td><td align="center"></td></tr></tbody></table><h2><span id="生成指定范围内的连续日期">生成指定范围内的连续日期</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> subquery <span class="keyword">as</span>  (</span><br><span class="line">    <span class="keyword">select</span> split(space(datediff(<span class="string">&#x27;2023-1-31&#x27;</span>,<span class="string">&#x27;2022-11-30&#x27;</span>)), <span class="string">&#x27; &#x27;</span>)  <span class="keyword">as</span> x</span><br><span class="line">) </span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    date_add(<span class="string">&#x27;2022-11-30&#x27;</span>, pos) <span class="keyword">as</span> new_date</span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">    subquery t</span><br><span class="line">    <span class="keyword">lateral</span> <span class="keyword">view</span> </span><br><span class="line">    posexplode(x) pe <span class="keyword">as</span> pos, val</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;sql要求&quot;&gt;sql要求&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;生成100以内的全部整数&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;涉及udtf函数&quot;&gt;涉及udtf函数&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;posexplode&lt;/strong&gt;(ARRAY&amp;l</summary>
      
    
    
    
    <category term="SQL" scheme="https://llye-hub.github.io/categories/SQL/"/>
    
    
    <category term="SQL高级语法" scheme="https://llye-hub.github.io/tags/SQL%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SparkSQL之conf参数</title>
    <link href="https://llye-hub.github.io/posts/5e220c44.html"/>
    <id>https://llye-hub.github.io/posts/5e220c44.html</id>
    <published>2023-02-03T08:15:46.000Z</published>
    <updated>2023-02-20T05:44:02.740Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="官方说明传送门"></span></h1><h1><span id="资源参数">资源参数</span></h1><h2><span id="num-executors">num-executors</span></h2><ul><li>参数说明：该参数用于设置Spark作业总共要用多少个Executor进程来执行。Driver在向YARN集群管理器申请资源时，YARN集群管理器会尽可能按照你的设置来在集群的各个工作节点上，启动相应数量的Executor进程。这个参数非常之重要，如果不设置的话，默认只会给你启动少量的Executor进程，此时你的Spark作业的运行速度是非常慢的。</li><li>参数调优建议：每个Spark作业的运行一般设置50~100个左右的Executor进程比较合适，设置太少或太多的Executor进程都不好。设置的太少，无法充分利用集群资源；设置的太多的话，大部分队列可能无法给予充分的资源。</li></ul><h2><span id="executor-memory">executor-memory</span></h2><ul><li>参数说明：该参数用于设置每个Executor进程的内存。Executor内存的大小，很多时候直接决定了Spark作业的性能，而且跟常见的JVM OOM异常，也有直接的关联。</li><li>参数调优建议：每个Executor进程的内存设置4G~8G较为合适。但是这只是一个参考值，具体的设置还是得根据不同部门的资源队列来定。可以看看自己团队的资源队列的最大内存限制是多少，num-executors乘以executor-memory，是不能超过队列的最大内存量的。此外，如果你是跟团队里其他人共享这个资源队列，那么申请的内存量最好不要超过资源队列最大总内存的1&#x2F;3~1&#x2F;2，避免你自己的Spark作业占用了队列所有的资源，导致别的同学的作业无法运行。</li></ul><p>##executor-cores</p><ul><li>参数说明：该参数用于设置每个Executor进程的CPU core数量。这个参数决定了每个Executor进程并行执行task线程的能力。因为每个CPU core同一时间只能执行一个task线程，因此每个Executor进程的CPU core数量越多，越能够快速地执行完分配给自己的所有task线程。</li><li>参数调优建议：Executor的CPU core数量设置为2~4个较为合适。同样得根据不同部门的资源队列来定，可以看看自己的资源队列的最大CPU core限制是多少，再依据设置的Executor数量，来决定每个Executor进程可以分配到几个CPU core。同样建议，如果是跟他人共享这个队列，那么num-executors * executor-cores不要超过队列总CPU core的1&#x2F;3~1&#x2F;2左右比较合适，也是避免影响其他同学的作业运行。</li></ul><h2><span id="driver-memory">driver-memory</span></h2><ul><li>参数说明：该参数用于设置Driver进程的内存。</li><li>参数调优建议：Driver的内存通常来说不设置，或者设置1G左右应该就够了。唯一需要注意的一点是，如果需要使用collect算子将RDD的数据全部拉取到Driver上进行处理，那么必须确保Driver的内存足够大，否则会出现OOM内存溢出的问题。</li></ul><h2><span id="sparkdefaultparallelism">spark.default.parallelism</span></h2><ul><li>参数说明：该参数用于设置每个stage的默认task数量。这个参数极为重要，如果不设置可能会直接影响你的Spark作业性能。</li><li>参数调优建议：Spark作业的默认task数量为500~1000个较为合适。很多同学常犯的一个错误就是不去设置这个参数，那么此时就会导致Spark自己根据底层HDFS的block数量来设置task的数量，默认是一个HDFS block对应一个task。通常来说，Spark默认设置的数量是偏少的（比如就几十个task），如果task数量偏少的话，就会导致你前面设置好的Executor的参数都前功尽弃。试想一下，无论你的Executor进程有多少个，内存和CPU有多大，但是task只有1个或者10个，那么90%的Executor进程可能根本就没有task执行，也就是白白浪费了资源！因此Spark官网建议的设置原则是，设置该参数为num-executors * executor-cores的2~3倍较为合适，比如Executor的总CPU core数量为300个，那么设置1000个task是可以的，此时可以充分地利用Spark集群的资源。</li></ul><h2><span id="sparkstoragememoryfraction">spark.storage.memoryFraction</span></h2><ul><li>参数说明：该参数用于设置RDD持久化数据在Executor内存中能占的比例，默认是0.6。也就是说，默认Executor 60%的内存，可以用来保存持久化的RDD数据。根据你选择的不同的持久化策略，如果内存不够时，可能数据就不会持久化，或者数据会写入磁盘。</li><li>参数调优建议：如果Spark作业中，有较多的RDD持久化操作，该参数的值可以适当提高一些，保证持久化的数据能够容纳在内存中。避免内存不够缓存所有的数据，导致数据只能写入磁盘中，降低了性能。但是如果Spark作业中的shuffle类操作比较多，而持久化操作比较少，那么这个参数的值适当降低一些比较合适。此外，如果发现作业由于频繁的gc导致运行缓慢（通过spark web ui可以观察到作业的gc耗时），意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。</li></ul><h2><span id="sparkshufflememoryfraction">spark.shuffle.memoryFraction</span></h2><ul><li>参数说明：该参数用于设置shuffle过程中一个task拉取到上个stage的task的输出后，进行聚合操作时能够使用的Executor内存的比例，默认是0.2。也就是说，Executor默认只有20%的内存用来进行该操作。shuffle操作在进行聚合时，如果发现使用的内存超出了这个20%的限制，那么多余的数据就会溢写到磁盘文件中去，此时就会极大地降低性能。</li><li>参数调优建议：如果Spark作业中的RDD持久化操作较少，shuffle操作较多时，建议降低持久化操作的内存占比，提高shuffle操作的内存占比比例，避免shuffle过程中数据过多时内存不够用，必须溢写到磁盘上，降低了性能。此外，如果发现作业由于频繁的gc导致运行缓慢，意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。</li></ul><h1><span id="广播相关">广播相关</span></h1><h2><span id="sparksqlbroadcasttimeout">spark.sql.broadcastTimeout</span></h2><h2><span id="sparkkryoserializerbuffermaxx3d128m">spark.kryoserializer.buffer.max&#x3D;128M</span></h2><h2><span id="sparksqlshufflepartitionsx3d1000">spark.sql.shuffle.partitions&#x3D;1000</span></h2><h2><span id="sparksqlorccompressioncodecx3dzlib">spark.sql.orc.compression.codec&#x3D;zlib</span></h2><h2><span id="sparksqlfilesmaxpartitionbytesx3d65536">spark.sql.files.maxPartitionBytes&#x3D;65536</span></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;官方说明传送门&quot;&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h1&gt;&lt;span id=&quot;资源参数&quot;&gt;资源参数&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;num-executors&quot;&gt;num-executors&lt;/span&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;参数说明：该</summary>
      
    
    
    
    <category term="SQL" scheme="https://llye-hub.github.io/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>hiveSQL之set参数</title>
    <link href="https://llye-hub.github.io/posts/4547a6e2.html"/>
    <id>https://llye-hub.github.io/posts/4547a6e2.html</id>
    <published>2023-02-03T08:14:57.000Z</published>
    <updated>2023-02-20T07:52:21.554Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="官方传送门"></span></h1><h2><span id="hivemergemapfiles">hive.merge.mapfiles</span></h2><p>Default Value: true<br>map-only任务结束时合并小文件</p><h2><span id="hivemergemapredfiles">hive.merge.mapredfiles</span></h2><p>Default Value: true<br>map-reduce任务结束时合并小文件</p><h2><span id="hiveoptimizectematerializethreshold">hive.optimize.cte.materialize.threshold</span></h2><p>默认情况下是-1（关闭）；当开启（大于0），比如设置为2，则如果with..as语句被引用2次及以上时，会把with..as语句生成的table物化，从而做到with..as语句只执行一次，来提高效率</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;官方传送门&quot;&gt;&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;hivemergemapfiles&quot;&gt;hive.merge.mapfiles&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Default Value: true&lt;br&gt;map-only任务结束时合并小文</summary>
      
    
    
    
    <category term="SQL" scheme="https://llye-hub.github.io/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>hiveSQL命令之alter partition</title>
    <link href="https://llye-hub.github.io/posts/8a94c1da.html"/>
    <id>https://llye-hub.github.io/posts/8a94c1da.html</id>
    <published>2023-02-02T06:02:26.000Z</published>
    <updated>2023-02-21T06:18:34.677Z</updated>
    
    <content type="html"><![CDATA[<p>msck repair table</p><p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-ExchangePartition">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-ExchangePartition</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;msck repair table&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-ExchangePartition</summary>
      
    
    
    
    <category term="SQL" scheme="https://llye-hub.github.io/categories/SQL/"/>
    
    
    <category term="改分区" scheme="https://llye-hub.github.io/tags/%E6%94%B9%E5%88%86%E5%8C%BA/"/>
    
  </entry>
  
  <entry>
    <title>hadoop命令之distcp分布式拷贝</title>
    <link href="https://llye-hub.github.io/posts/bcc5bdf2.html"/>
    <id>https://llye-hub.github.io/posts/bcc5bdf2.html</id>
    <published>2023-02-01T02:06:03.000Z</published>
    <updated>2023-02-20T08:58:42.949Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="distcp用途">distcp用途</span></h1><p>DistCp（分布式拷贝）是用于大规模集群内部和集群之间拷贝的工具。<br>使用Map&#x2F;Reduce实现文件分发，错误处理和恢复，以及报告生成。<br>DistCp将文件和目录的列表作为map任务的输入，每个任务会完成源列表中部分文件的拷贝。 </p><h1><span id="distcp用法">distcp用法</span></h1><p>命令行中可以指定多个源目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">hadoop distcp source_dir1 [source_dir2 source_dir3……] target_dir</span><br></pre></td></tr></table></figure><p>集群内拷贝</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">hadoop distcp [hdfs://nn:8020]/db/table_a/partition=1 [hdfs://nn:8020]/db/table_b/partition=1</span><br></pre></td></tr></table></figure><p>不同集群间拷贝，DistCp必须运行在目标端集群上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">hadoop distcp hdfs://nn1:8020/db/table_a/partition=1 hdfs://nn2:8020/db/table_b/partition=1</span><br></pre></td></tr></table></figure><h1><span id="常用参数选项">常用参数选项</span></h1><h2><span id="-overwrite">-overwrite</span></h2><p>源文件覆盖同名目标文件</p><h2><span id="-update">-update</span></h2><p>拷贝目标目录下不存在而源目录下存在的文件，当文件大小不一致时，源文件覆盖同名目标文件</p><h2><span id="-delete">-delete</span></h2><p>删除目标目录下存在，但源目录下不存在的文件，需要配合<code>-update</code>或<code>-overwrite</code>使用</p><h2><span id="-prbugpcaxt">-p[rbugpcaxt]</span></h2><p>控制是否保留源文件的属性，<code>-p</code>默认全部保留，常用的为<code>-pbugp</code>。<br>修改次数不会被保留。并且当指定 -update 时，更新的状态不会 被同步，除非文件大小不同（比如文件被重新创建）。</p><table><thead><tr><th>标识</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>r</td><td>replication number</td><td>文件副本数</td></tr><tr><td>b</td><td>block size</td><td>文件块大小</td></tr><tr><td>u</td><td>user</td><td>用户</td></tr><tr><td>g</td><td>group</td><td>组</td></tr><tr><td>p</td><td>permission</td><td>文件权限</td></tr><tr><td>c</td><td>checksum-type</td><td>校验和类型</td></tr><tr><td>a</td><td>acl</td><td></td></tr><tr><td>x</td><td>xattr</td><td></td></tr><tr><td>t</td><td>timestamp</td><td>时间戳</td></tr></tbody></table><h2><span id="-m">-m</span></h2><p>控制拷贝时的map任务最大个数<br>如果没使用-m选项，DistCp会尝试在调度工作时指定map数目&#x3D;min(total_bytes&#x2F;bytes.per.map,20*num_task_trackers)， 其中bytes.per.map默认是256MB。</p><h1><span id="应用实例">应用实例</span></h1><h2><span id="表结构一致的两表互相拷贝数据">表结构一致的两表互相拷贝数据</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#********************************************************************************</span></span><br><span class="line"><span class="comment"># **  功能描述：通过hdfs文件路径拷贝的方式，实现表结构完全相同的表互相拷贝数据</span></span><br><span class="line"><span class="comment">#********************************************************************************</span></span><br><span class="line"><span class="comment"># 指定源路径、目标路径</span></span><br><span class="line">source_dir=/db/table_a/partition=1</span><br><span class="line">target_dir=/db/table_b/partition=1</span><br><span class="line">db_name=db_a</span><br><span class="line">target_tbl_name=db_a.table_b</span><br><span class="line"><span class="comment"># 判断源路径是否存在，不存在则返回</span></span><br><span class="line">hadoop fs -<span class="built_in">test</span> -e <span class="variable">$source_dir</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;源路径<span class="variable">$source_dir</span>不存在&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 判断目标路径是否存在，不存在则创建</span></span><br><span class="line">hadoop fs -<span class="built_in">test</span> -e <span class="variable">$target_dir</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ];<span class="keyword">then</span></span><br><span class="line">  hadoop fs -<span class="built_in">mkdir</span> <span class="variable">$target_dir</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;目标路径<span class="variable">$target_dir</span>不存在，创建成功&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 开始拷贝</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;开始hdfs文件拷贝，source_dir=<span class="variable">$source_dir</span>，target_dir=<span class="variable">$target_dir</span>&quot;</span></span><br><span class="line">hadoop distcp -overwrite -delete -pbugp <span class="variable">$source_dir</span> <span class="variable">$target_dir</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;hdfs文件拷贝成功&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;hdfs文件拷贝失败&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 刷新目标表的metastore信息</span></span><br><span class="line">hive -database <span class="variable">$db_name</span> -v -e <span class="string">&quot;msck repair table <span class="variable">$target_tbl_name</span>;&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$target_tbl_name</span>表的metastore信息刷新成功&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h1><span id="参考资料">参考资料</span></h1><p><a href="https://hadoop.apache.org/docs/r1.0.4/cn/distcp.html">DistCp使用指南</a><br><a href="https://hadoop.org.cn/docs/hadoop-distcp/DistCp.html">Hadoop中文网：DistCp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;distcp用途&quot;&gt;distcp用途&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;DistCp（分布式拷贝）是用于大规模集群内部和集群之间拷贝的工具。&lt;br&gt;使用Map&amp;#x2F;Reduce实现文件分发，错误处理和恢复，以及报告生成。&lt;br&gt;DistCp将文件和目录</summary>
      
    
    
    
    <category term="hadoop" scheme="https://llye-hub.github.io/categories/hadoop/"/>
    
    
    <category term="hadoop命令" scheme="https://llye-hub.github.io/tags/hadoop%E5%91%BD%E4%BB%A4/"/>
    
    <category term="hdfs文件拷贝" scheme="https://llye-hub.github.io/tags/hdfs%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>Shell命令之set-e</title>
    <link href="https://llye-hub.github.io/posts/ba81765c.html"/>
    <id>https://llye-hub.github.io/posts/ba81765c.html</id>
    <published>2023-01-31T09:26:54.000Z</published>
    <updated>2023-02-20T08:35:55.810Z</updated>
    
    
    
    
    <category term="shell" scheme="https://llye-hub.github.io/categories/shell/"/>
    
    
    <category term="shell命令" scheme="https://llye-hub.github.io/tags/shell%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>hadoop基本命令</title>
    <link href="https://llye-hub.github.io/posts/b24f0feb.html"/>
    <id>https://llye-hub.github.io/posts/b24f0feb.html</id>
    <published>2023-01-31T09:10:11.000Z</published>
    <updated>2023-02-20T08:35:55.810Z</updated>
    
    <content type="html"><![CDATA[<p>hadoop fs -cp<br>hadoop fs -rm -r<br>hadoop distcp -overwrite -delete -p<br>hadoop fs -mkdir -p</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hadoop fs -cp&lt;br&gt;hadoop fs -rm -r&lt;br&gt;hadoop distcp -overwrite -delete -p&lt;br&gt;hadoop fs -mkdir -p&lt;/p&gt;
</summary>
      
    
    
    
    <category term="hadoop" scheme="https://llye-hub.github.io/categories/hadoop/"/>
    
    
    <category term="hadoop命令" scheme="https://llye-hub.github.io/tags/hadoop%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>hive动态分区</title>
    <link href="https://llye-hub.github.io/posts/44d3528f.html"/>
    <id>https://llye-hub.github.io/posts/44d3528f.html</id>
    <published>2023-01-30T09:01:49.000Z</published>
    <updated>2023-02-20T08:35:55.811Z</updated>
    
    
    
    
    <category term="hive" scheme="https://llye-hub.github.io/categories/hive/"/>
    
    
    <category term="动态分区" scheme="https://llye-hub.github.io/tags/%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA/"/>
    
  </entry>
  
</feed>
