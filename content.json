{"meta":{"title":"LLye","subtitle":"","description":"scsadad","author":"LLye","url":"https://llye-hub.github.io","root":"/"},"pages":[{"title":"Repositories","date":"2023-01-16T07:15:53.818Z","updated":"2023-01-16T07:15:53.818Z","comments":false,"path":"index.html","permalink":"https://llye-hub.github.io/index.html","excerpt":"","text":""},{"title":"About Me","date":"2023-04-28T08:20:52.266Z","updated":"2023-04-28T08:20:52.266Z","comments":false,"path":"about/index.html","permalink":"https://llye-hub.github.io/about/index.html","excerpt":"","text":"工作经历 2021.07.01 ~ 至今 | 海拍客 | 数仓开发工程师主要职责： 负责维护数据仓库模型 负责数仓任务优化"},{"title":"友情链接","date":"2023-01-16T07:30:43.399Z","updated":"2023-01-16T07:30:43.399Z","comments":true,"path":"links/index.html","permalink":"https://llye-hub.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-01-16T07:29:50.652Z","updated":"2023-01-16T07:29:50.652Z","comments":false,"path":"tags/index.html","permalink":"https://llye-hub.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2023-02-17T05:46:56.411Z","updated":"2023-02-17T05:46:56.411Z","comments":false,"path":"categories/index.html","permalink":"https://llye-hub.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"hiveSQL之groupBy语句增强语法grouping sets/cube/rollup","slug":"SQL/hiveSQL之分析函数groupingSet|cube|rollup","date":"2023-05-05T06:01:45.000Z","updated":"2023-05-06T10:05:09.604Z","comments":true,"path":"posts/67bc5d15.html","link":"","permalink":"https://llye-hub.github.io/posts/67bc5d15.html","excerpt":"","text":"本文详细整理了关于group by子句的增强聚合语法grouping sets/CUBE/rollup的具体用法，语法的hive官方介绍文档 。 测试数据 首先声明使用的hive版本为 2.3.9 12345678910111213141516171819202122232425262728293031323334drop table if exists travel_data;create table if not exists travel_data( province string, city string, attraction string, star_level int, Price double, sales int, sale_date string);insert overwrite table travel_dataselect &#x27;河南省&#x27;,&#x27;郑州市&#x27;,&#x27;方特&#x27;,4,312.22,15789,&#x27;2019-02-03&#x27;union allselect &#x27;河南省&#x27;,&#x27;郑州市&#x27;,&#x27;二七广场&#x27;,4,0,5942,&#x27;2019-02-03&#x27;union allselect &#x27;河南省&#x27;,&#x27;郑州市&#x27;,&#x27;河南省博物馆&#x27;,4,1.22,943,&#x27;2019-02-03&#x27;union allselect &#x27;河南省&#x27;,&#x27;洛阳市&#x27;,&#x27;白云山&#x27;,4,324.44,16843,&#x27;2019-02-03&#x27;union allselect &#x27;河南省&#x27;,&#x27;洛阳市&#x27;,&#x27;白马寺&#x27;,4,23.45,2567,&#x27;2019-02-03&#x27;union allselect &#x27;河南省&#x27;,&#x27;洛阳市&#x27;,&#x27;龙门石窟&#x27;,4,45,15784,&#x27;2019-02-03&#x27;union allselect &#x27;广东省&#x27;,&#x27;深圳市&#x27;,&#x27;东部华侨城&#x27;,4,86,9523,&#x27;2019-02-03&#x27;union allselect &#x27;广东省&#x27;,&#x27;深圳市&#x27;,&#x27;欢乐谷&#x27;,4,54,2573,&#x27;2019-02-03&#x27;union allselect &#x27;广东省&#x27;,&#x27;深圳市&#x27;,&#x27;世界之窗&#x27;,4,34,5644,&#x27;2019-02-03&#x27;union allselect &#x27;广东省&#x27;,&#x27;广州市&#x27;,&#x27;长隆&#x27;,4,46,25673,&#x27;2019-02-03&#x27;union allselect &#x27;广东省&#x27;,&#x27;广州市&#x27;,&#x27;广州塔&#x27;,4,35,9735,&#x27;2019-02-03&#x27;; grouping set语句 官方说明 The GROUPING SETS clause in GROUP BY allows us to specify more than one GROUP BY option in the same record set. All GROUPING SET clauses can be logically expressed in terms of several GROUP BY queries connected by UNION. Table-1 shows several such equivalent statements. This is helpful in forming the idea of the GROUPING SETS clause. A blank set ( ) in the GROUPING SETS clause calculates the overall aggregate. grouping set子句可以实现对同一个数据集指定多个group by条件，适合多维聚合场景下使用。其执行效果等同于对多个group by查询进行union all操作。 SELECT a, b, SUM(c) FROM tab1 GROUP BY a, b GROUPING SETS ( (a,b) )等同下面语句 SELECT a, b, SUM© FROM tab1 GROUP BY a, b SELECT a, b, SUM( c ) FROM tab1 GROUP BY a, b GROUPING SETS ( (a, b), a, b, ( ) )等同下面语句 SELECT a, b, SUM( c ) FROM tab1 GROUP BY a, b UNION SELECT a, null, SUM( c ) FROM tab1 GROUP BY a, null UNION SELECT null, b, SUM( c ) FROM tab1 GROUP BY null, b UNION SELECT null, null, SUM( c ) FROM tab1 实现逻辑 如果说 union all是先聚合再联合，那么 grouping sets就是先联合再聚合。grouping sets根据 N个分组对每条数据进行计算，不在当前分组的字段置为null，将数据量扩展成原来的 N倍，再按 group by的字段做聚合计算。 group by province,city grouping sets ((province,city),province,())计算效果图如下： …… group by province,city union all …… group by province计算效果图如下： 语法 grouping sets子句必须跟在group by语句后，且出现在grouping sets的字段必须出现在group by语句中，但是出现在group by中字段不一定要出现在grouping sets语句中 出现在group by中但是没有在grouping sets中的字段将会被赋值为null grouping__id字段可以区分不同的聚合粒度，表示当前行数据数据哪个分组集合 grouping函数可以处理空值，grouping()接受一个列名作为参数，如果结果对应行使用了参数列做聚合，返回0，此时意味着NULL来自输入数据；否则返回1，此时意味着NULL是grouping sets的占位符。 测试sql：从省&amp;市聚合维度统计销售数量 1234567891011121314select td.province, td.city, IF(grouping(td.city) = 0,td.city,&#x27;城市&#x27;) as city2, -- 进行空值判断，替换输出更有实际意义的值 sum(sales) as sales, grouping__idfrom travel_data tdgroup by td.province, td.city grouping SETS (td.province,td.city)order by grouping__id; 查询结果： 第一列按照province 第二列按照city 第三列按照city分组，并对空值进行替换 第四列按照province或city分组，进行统计计算 第五列grouping__id表示当前行数据属于哪个分组，1表示province，2表示city 测试sql：从省&amp;市、省&amp;日期、省三个聚合维度统计销售数量 12345678910111213141516171819select td.province , td.city, sum(sales) as sales, td.sale_date , grouping__idfrom travel_data tdgroup by td.province , td.city, td.sale_dategrouping SETS ( (td.province , td.city) ,(td.province, td.sale_date) ,td.province )order by grouping__id c\\ube语句 CUBE函数跟group by语句一起使用，可以对group by的所有字段进行组合再进行聚合计算。 group by a,b,c with CUBE执行效果等同于 group by a, b, c grouping sets ( (a, b, c), (a, b), (b, c), (a, c), (a), (b), (c), ( )) 测试sql 123456789101112131415161718192021222324252627select province , city, sum(sales) as sales, grouping__idfrom travel_datagroup by province,citywith CUBEorder by grouping__id;-- 或者下面这种写法select province , city, sum(sales) as sales, grouping__idfrom travel_datagroup by CUBE(province,city)order by grouping__id; 查询结果： 从上面的结果数据可以看到，对聚合字段 (province,city)使用CUBE函数后，返回结果有4种聚合维度：(province,city)、(province)、(city)、() rollup语句 rollup是CUBE的子集，以最左侧的维度为主，从该维度进行层级聚合，可以实现上钻和下钻的效果 group by a,b,c with rollup假设层次结构是 &quot;a &quot;向下钻到 &quot;b &quot;向下钻到 “c”，执行效果等同于 group by a, b, c grouping sets ( (a, b, c), (a, b), (a), ( )) 测试sql 123456789101112131415161718192021222324252627select province , city, sale_date , sum(sales) as sales, grouping__idfrom travel_datagroup by province,city,sale_datewith rolluporder by grouping__id-- 或者下面这种写法select province , city, sale_date , sum(sales) as sales, grouping__idfrom travel_data group by rollup(province,city,sale_date)order by grouping__id 查询结果： 从上面的结果数据可以看到，对聚合字段 (province,city,sale_date)使用rollup函数后，返回结果有4种聚合维度：(province,city,sale_date)、(province,city)、(province)、() grouping__id计算方法 从rollup函数的例子可以看到，grouping__id的数值并不是连续的，下面总结下grouping__id计算方法 将group by语句的字段顺序（不理解网上有说法是按字段倒序排序）。所以这里要注意groupby字段顺序变化是会影响grouping__id计算结果的。 对于每个字段，若出现在了当前粒度中，则该字段位置赋值为0，否则为1。 这样就形成了一个二进制数，将这个二进制数转为十进制，即为当前粒度对应的 grouping__id。 以统计粒度 group by province,city,sale_date为例， 字段顺序为:province,city,sale_date 所有聚合维度对应的二进制数为： grouping sets 按字段顺序赋值二进制数 转换为十进制的grouping__id province,city,sale_date 000 0 province,city 001 1 province,sale_date 010 2 province 011 3 city,sale_date 100 4 city 101 5 sale_date 110 6 无 111 7 测试sql： 123456789101112select td.province , city, td.sale_date , sum(sales) as sales, grouping__idfrom travel_data tdgroup by CUBE(td.province,td.city,td.sale_date)order by grouping__id 查询结果： 从上面的结果可以看到，grouping__id的数值与计算规则得出来的一致。 可实现的数据分析场景 上面几节总结了group by的增强语法，那么这些语法对实际工作场景有什么帮助呢？总不能说不用写多个union all语句，查询sql更简洁吧，但是sql并非越简洁越好，不能一味追求简洁性，好的sql应该是逻辑清晰且易理解的。 下面整理了些个人认为group by能解决或者说是能优化数据分析场景。 场景一： 参考文章 Hive分析函数详解：GROUPING SETS/CUBE/ROLLUP 从源码深入理解 Spark SQL 中的 Grouping Sets 语句","categories":[{"name":"对照文件存放的目录名称","slug":"对照文件存放的目录名称","permalink":"https://llye-hub.github.io/categories/%E5%AF%B9%E7%85%A7%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE%E7%9A%84%E7%9B%AE%E5%BD%95%E5%90%8D%E7%A7%B0/"}],"tags":[{"name":"文章内容的关键词","slug":"文章内容的关键词","permalink":"https://llye-hub.github.io/tags/%E6%96%87%E7%AB%A0%E5%86%85%E5%AE%B9%E7%9A%84%E5%85%B3%E9%94%AE%E8%AF%8D/"}]},{"title":"关于数据仓库建设的一些思考","slug":"数据仓库/关于数据仓库建设的一些思考","date":"2023-04-14T09:02:13.000Z","updated":"2023-04-26T02:41:06.186Z","comments":true,"path":"posts/49066d40.html","link":"","permalink":"https://llye-hub.github.io/posts/49066d40.html","excerpt":"","text":"基于在海拍客的工作经历，沉淀了一些关于数据仓库的思考，没有框架，想到什么写什么 数据仓库解决什么问题？1、避免”烟囱式”开发，减少由于业务变化带来的维护成本烟囱式开发，所有报表都是基于原始数据加工，SQL复杂度高，模型和指标无法复用，大量重复计算逻辑。一但某个业务变化，模型维护成本极高，而且大量的重复计算对资源消耗非常大，极易造成队列阻塞，影响数据产出 2、统一数据指标口径，保证数据一致性：定义一致、计算口径一致、数据源一致 中文博大精深，一个简单的中文词经常包含些隐含信息。 比如交易金额，当需求方说要取今天的交易额的时候，很多时候说的是今天的成功的交易金额，然而在逻辑角度，交易金额指的的订单表上支付金额+优惠券金额，不进行交易状态的条件过滤。 鸡同鸭讲，说的是两个人沟通时说的不是同一个东西。 比如订单的发货时间，对于财务业务，指的是订单表中的delivery_time字段，表示的是供货商提供的物流订单后第一次抓取到发货状态的时间；对于门店用户角度，指的是物流表中最终发送到用户手上那个订单的物流的发货时间。 3、数据结构清晰，方便数据查找和理解数仓的分层设计能明晰每张表的作用域和职责，在需要查询使用时，能快速找到要用的表和理解每个字段的含义 公司数仓存在什么问题？ 一张订单宽表打天下，其中包含了订单、交易、退款、物流、门店、供应商等多维度信息，下游以一个个数据烟囱的方式时间使用dw层的明细数据，无法收缩口径，保证数据的一致性。 基于onedate理论建设的数仓模型没有长期推广和取代订单宽表，人就有大量新报表从订单宽表获取数据 数据仓库模型分层设计方案基于主题域建设好的数据仓库设计评价标准好的数仓设计标准应该是数据丰富完善、数据复用性强、数据规范性高。以下面的数仓架构为例 完善度 dwd层完善度：衡量dwd层的完善度，看ods层被dw&#x2F;dws&#x2F;ads&#x2F;dim层依赖的数量（跨层引用率）。ods层被越多的非dwd层引用，说明越多任务基于原始数据进行开发，各种数据清洗、数据格式化存在重复计算。好的数仓设计一般要求ods层只能被dwd层引用，即跨层引用率为100%。 dw&#x2F;dws&#x2F;ads层完善度：衡量汇总数据的完善度，看仅靠dw&#x2F;dws&#x2F;ads层数据就能满足的查询比例（汇总层查询比例）。若汇总层数据无法满足查询要求，则需要从原始数据自行加工计算。汇总层查询比例不可能完全做到100%，但值越高，说明数仓上层模型建设越完善。 复用度 模型引用系数：⼀个模型被读取，直接产出下游模型的平均数量。若对所有dwd层表（有下游）的模型引用系数取均值，则可衡量dwd层的模型引用系数。系数越大，说明数仓复用度越高。从数据血缘图来看，自下而上一条线的模型设计复用性差，复杂场景下这条线会极其长，而理想的模型设计应是交织的发散型结构 规范度 表分层规范：有多少表不能划属到数仓架构的某一层，一般从表命名前缀体现。 表命名规范：⼀个规范的表命名应该包括所属分层、所属主题域、调度周期、全量&#x2F;增量等信息。 字段命名规范：相同字段应在不同表保持一样的命名。同样是用户id，不能在A表叫user_id，在B表却叫u_id. 数仓规范度越高，表名包含的信息越多，在数据地图查找表越方便，也更利于提高模型表复用度。 一些博客文章如何避免数仓模型“烟囱式”建设","categories":[{"name":"数据仓库","slug":"数据仓库","permalink":"https://llye-hub.github.io/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"}],"tags":[]},{"title":"数仓建模之关于流量域建设","slug":"数据仓库/数仓建模之关于流量域建设","date":"2023-04-14T08:56:16.000Z","updated":"2023-05-04T08:13:43.391Z","comments":true,"path":"posts/bbbc8dfb.html","link":"","permalink":"https://llye-hub.github.io/posts/bbbc8dfb.html","excerpt":"这是一篇加密文章，需要密码才能继续阅读。","text":"0ae7e196f2221a75e5346dcbb7e124f3b1b3c5930620d283013007149d4c4935b69ce92f61658828479c839b5ea9198d1bda489f76e02aefb6c8c1b6c4f32fd31f36e698664f02671ce11c574fe5628c41c77d6cc2ec1d618c514b8cce5acf2df081a689c6f0d19f8bef7c006ffc08cddbca109622162b36c6d9fbfafbe7936ea87a2f15ce8174136e5958c56d9a5c6def26660648a334264561b2a1c54019597af2ae6722b8d3d1ce7f4df7c61d75210ded4c90309ee85f7937f285e07c408eabc4c08cba5c0271a494674568b02061f603f5e7687811ca699d4cfc581f9d0d02713eee0c838618b0d06f5d4f80e47250263d3ae8e035fad8a2be9b9d7ed7a62cc5e89a35715c6c628ec20f9d92b75664721839267b8a6ac09060bd423a4f51992a8eea69f00945a9f406bbf11e990f51cd1dcd5a2fe8d421f6d8cb08fb8c62b6c8ac0a434015e7a77c921ff39fb2aab121959dde0844342df89dd663182add768f7440843d3011342fa0234ef082a4b7b34fb25114ae0d0afc744fde4b28e933de7384ef209f2349bebcb86ddb7a88d2d3f65bbec58caa2447ccd5e15de56d408bdf42f72a25022628adac8ef4135fdcd99a4a49f987051bcdb708f27d1f88b9f913b9735a7c0489bb3ee28f14a324cb13ee0f901feb75dd6690329fc9fb6a1b1ffa8797d0e28e439b7e633351af27acdbcd3e8a6ee7a53b0b3b723d4dfbd33fcf1114902423f8d1bca1579fc5f2d6e9c17f7dc3e04c1bf197a922fe01700796da4e6fd5e2541f4d00dbc9cebcd148e0e7320e83871cfcb101cde743d9d29b0318b85198536f49d371e52f961863d66286a9aefa2b34da0bc264e5d6622e526e9010b820c9ced1db72589d0dbfc455195f32109ddb89c2acd831a7e9a52388fa4cb84b6eed6c2098f3b9909358f66b5350c822b39c687bd31c81b47247d24361e6df05e047caf9b07bfe34008137fd86fed5fd1d7584d6997843626322960f9ed4f9d0d2466efceae753659daf6b55d94ca438c3a5352c661bb98a537a1fd225dd054e60a31b155ad74895781ef4891b3cced550bd218466df88b05c8bd03847cd86e2d96a2c4cbd98dc15b8ef7953c4cf65ecfdd92e8ddea09411825ffd0fa246cb922c317dfa955f2b775469585f11b041e99dc8efcd7e0982bbc2b64f49a3f5e010f623160f7392ea29790e87db9abfdcb21fff38ead00a0171d87a87ad5b75058380b214a76467dfea2df60856e4c4201a00e06105986c0b72dd6b01a31904a93fb1b7b1dc7fa59fe9c72dbb5ae228865c1c777d49ef3897f1144f780a0d9cd6e61d200e3a56b8563bacd26d1474804724bc3bf507615f84d76ad46353f5b53bb9ff99cbb700276198866b7bfabd20df8a44c529a2d134e21904d7b40dc14a7c767b649839c1acee8c91a41a9723b9e68573c88b883eae49181b1f1b00a4fab7653443fc9ab77779fbde14bc07cd6a36a7db312eb4b5ceceb9936700a8bc2686cd0baf36768981c050749e105063afda735180ab8157643b146f8b431e76a5c084e912d538f65ae94f105eb8e9ba840e843f3413e13c967942105e8f35e0fb265c9363523a5ab3fd9e90e22c367dbcdeeebfc4d564900951f4bf43097e90f62411b6026ce225051093aa26d3073b3182b21ba17391e768a85bdb9a325ecf75855607d6c924541d6f2654b236b87c543c5a4533411059b70b19000f165ce5689d39766e84cc3190b0aa21417f70a820ffc711d60a832ef0d113849e6dd1d055f1170427b2f7eeb5053cc7a5ee49eda99ae74541aba2fdf4ee81fc5dbe81a551684f071ba75efdb5c83963f5c417fedb286c19b97e21881e1f4d9759414a623542a525794d94eade347ec15199652072637d73174dcac9f2036102ac98cc91a603c2e1d477e68863b10ff4aec642fdbb258503cec41e9fce8ce790a4bec1ec58e6af3c95cb3ee3a76afafa6980c5b3af204346b5b8ee3e0234c5e4daf415bb7930f5ccc0426b56a43132aa0ce2a7bd1f2a077670f10ae76057cdaf9f5b88e38aeccdd68785003a48912627b8a2efaa3f6f5d51b3c75f4e91e17e481951b11042d8cf519dc6556b644e3656be649f4d203c4fea0a3b28c57775a8f080503d67859b9961dbd1f68225dc3187dcc284d9d1aea385f536793ff1638bc0c72ed85c223af43bd3175ed3c81fb085320aa52675cceef68d7f61237185d3789cebfb0db9d5747b359bc570bd6fad3b8275dfbd624315985e1f04ab84f4161cbaae8c24bf3884c3f7d07d6258902ed89414cb5f59fd69fdb6547b20c48c8266a46fcb1ef8f8189dad305fe9663eab5fe235f2eb06c9f5eadb3ab75ba52a0a6711ee68ca62e2c6e085d61dc84582ad08792eb045858ca6dd74cd71082ef425334e9555684123351ec62a1b04262605de561a97b8f24e11ac28b149d9dc73f9e974836e99b1bc8878e8c45ed26da1890610a138a9ddb0dac1160db943b8cdc6790981df187f449fcadcf30684736e509a5350b4188d4109c425a0ef2316548cfc8514a3458ff0b1f2812b7c9bb9bea472d434392695be626174a273fd292be397b69c13474401ba70f43462039f561e3f1d20c6f46a637038708909d5daeb72599a0bb03ca675f855e4c0ae07e6477dcb267440b4d1c0679dd957a6fd1825a510b6400966f7be49e0cbc5b2cdbe0dfee19f31969f8bee5a3c13836206e85b1951763a24cada90e3407362cd44edf97915eb3c94365f9480acf95a5128dd58c070eca2b8f992b5af8f07d23195ca94ede1650e58fb0c2518b80904c4976be2d7038d3211782e96ddbf3eaef759d8f5019647774d34654d6858585bb4d5f2319b7fe51a084c3f9eb0f187434dd4c2693f2e2ff10e1e9314a96599453b3a21311e874749320a1165279a6157f1b500628db4357a17318d6e400be078e07fbcadbcc1de2fac666b20df8c0da09badc17e32537476f13ea992212ba8eda3f4d6b54ecdc43ef8c1894f9aa4376a81932d4b3f953b99b5b9eb4b98b90ab475e2bdd404360f6f5311f8d230e5f52f0964bd25b2ab3639596e8e13a289518d17867d6a38c38deca32a448c1466e348260935e41b432d344b46b065c79635f7051866ff7a56757d2d74d2a3ac79d3aac4805fa7aa6a31f2a2c5a98415e5ffc63b91c142824150bd6a1936574f6225feee2033ab4ac5bd5a243eb8ecb9252781e400329618576da793b63cf75011cecb462983af6d519f490806d316fe331aaceefea544d6066d679b2caae14306d00f636728f05e2a837b0cba417a74c8e3e9a74235d43491ba1d04d9e01e005bf12d2d17f66d9cf43caa78c70e2fcedef4475888b18e0c37f96f6d1fb82be2a8b9c4c1203d13f32845d0eb4a1d740a1d828701269f87009e4ed4408caa143871f9ed5cb5e9b786a8435ea44f244129ec8d221bab45b7ca1537ffb89a661556f0ae636494e51ebbbbc084470d4ab85c7a93a7da12f618671eb5f00e6f29fabeef366ff936a6f53c6b911515a96c8ddc87450632b6cedf5f5a412f67c1b406c1cc4edf5c6bd3e664bb88ee2b17d9223f70a0c838f0b60521ed0cccb2f13fda5e25f410c61e29c770d8f55f903485c6087755dd6d2acc40a5f0d7fde0d95dfd8c31266ada6cab49ea389a6222670bfc7c5795a35e37aa9df0d47dde8d10de58272ef44c6aac58e7fd059ec6f4b20fac2b74be89aba96517c33a669840c89c0499f479cc22bc9cecb7b4fea7d098fe70a152ffd55d25d03b7fa5763b97908d53138e3a35fb71afb8929a7ace1723d3b6f5908387e8e7e96adaea72173ef8b69ce039711737241b1ca44db2be2366968cc9ba25e41b6d9eafc8cc8952e0caeb73778567a4f1391445f196fcaa71178ffdc12712b98794141a8a54a8fb1491bd375f1ec85b7578b899ecfa79923143176294a4b20db228b12fd8a417c91d1e1f2af3aad31d4775719fe5f9b1cb099fde78dd30ac51306643d05a1f0880ec9c6123f3b5d4f4b33bfe0eee9e174b9e6c230f457bc486cfbfc63b6b0d826355ce95c960b006e62e5f28b71c396bad9b3906d1f1546510f81862fd3d82eaa4041cab43c69a33dbf15b4e9a617f8a14c3c35e8497672420667265b52c64c8ae262aaaf250c5ffd8862b2b070f3ec55a3a8dcef5701216ab3b9e8b9817f17ea8073d3bc61bc92a3c8edf9ba1bd8377efb96e404cf0374bc36f2cd8f3131186c40877ecf63244dcbdfa2062acad1fc4a4dfc5b696eef6c6ebfd50608abddc1530fb4c7cf61f74f864c9ea4c1479c0752a58633138cf7b1810fd643a52aa61dfa9f70b4467e1154438a2fcd34391ac973d3bd2279d452b03bffa067a1293a3fa14d47a987bf2b7eab375b8903682a5fe70649861e5ceb8c0c156cb1e70ea9e3557f1fa4fd852ead7be2f1089fea916dc3478294f6285f7c727b8f06fae8b81aadbb0807834b46a1588bae4def7bfe5e2e12441c8ffdd7cc8fec0ffd2d5012162aaf1e91fd0ebc1203905711fe04798749ebedc7ec2551bcc317ee66f6f43e484867f71bc9f8c33760ff980077241169f75c99c218e38b088057ac44c056f62ee53b09446035595aacc5a673030dd08e5fa2d 当前文章暂不对外可见，请输入密码后查看！","categories":[{"name":"数据仓库","slug":"数据仓库","permalink":"https://llye-hub.github.io/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"}],"tags":[{"name":"数仓建模","slug":"数仓建模","permalink":"https://llye-hub.github.io/tags/%E6%95%B0%E4%BB%93%E5%BB%BA%E6%A8%A1/"},{"name":"private","slug":"private","permalink":"https://llye-hub.github.io/tags/private/"}]},{"title":"在hive中嵌入自定义数据处理函数-UDF函数","slug":"hive/在hive中嵌入自定义数据处理函数-UDF函数","date":"2023-04-11T09:04:03.000Z","updated":"2023-04-18T07:45:38.183Z","comments":true,"path":"posts/cafe49d7.html","link":"","permalink":"https://llye-hub.github.io/posts/cafe49d7.html","excerpt":"","text":"","categories":[{"name":"hive","slug":"hive","permalink":"https://llye-hub.github.io/categories/hive/"}],"tags":[{"name":"写UDF","slug":"写UDF","permalink":"https://llye-hub.github.io/tags/%E5%86%99UDF/"}]},{"title":"hiveSQL之全面认识窗口函数","slug":"SQL/hiveSQL之全面认识窗口函数","date":"2023-03-31T02:46:52.000Z","updated":"2023-04-07T03:23:39.244Z","comments":true,"path":"posts/ed2327bc.html","link":"","permalink":"https://llye-hub.github.io/posts/ed2327bc.html","excerpt":"","text":"本文内容来自文章Hive SQL大厂必考常用窗口函数及面试题 受岗位性质和工作内容影响，在我从事数仓开发工作至今，对于窗口函数的使用场景都很基础，常用的也只有row_number、sum、max&#x2F;min，偶尔碰到些其他场景，因为不熟悉，可能就需要反复查看官方文档确认。 所以在上面文章阅读过程中，基于个人理解，重新梳理写了本文 窗口函数概述hive官方介绍 窗口函数也称为OLAP函数，是数据分析最常用到的函数，熟练的掌握窗口函数的各种用法和骚操作对从事数据工作者是很重要的。 与聚合函数将多条记录聚合为一条不同，窗口函数每条记录都会执行，执行前后数据量不变，且窗口函数兼具分组和排序两种功能。 窗口函数用法基本语法1&lt;窗口函数&gt; over ([partition by &lt;列名&gt;] [order by &lt;排序列名&gt;] [window_frame]) 其中： &lt;窗口函数&gt;: 指需要使用的分析函数，如row_number()、sum()等。 over() : 用来指定函数执行的窗口范围，这个数据窗口大小可能会随着行的变化而变化。如果括号中什么都不写，则意味着窗口包含满足where条件的所有行，窗口函数基于所有行进行计算 window_frame: 在分组窗口基础上，可以进一步指定窗口计算边界 设置窗口1）partition by子句窗口划分分组条件 12345SELECT uid, score, sum(score) OVER(PARTITION BY uid) AS sum_scoreFROM exam_record 2）order by子句窗口排序条件 12345SELECT uid, score, sum(score) OVER(ORDER BY uid) AS sum_scoreFROM exam_record 3）指定窗口大小指定窗口大小，又称为窗口框架。框架是重新定义窗口计算边界，框架有两种范围限定方式： 一种是使用 ROWS 子句，通过指定当前行之前或之后的固定数目的行来限制分区中的行数。 另一种是使用 RANGE 子句，按照排列序列的当前值，根据相同值来确定分区中的行数。 语法ORDER BY 字段名 RANGE|ROWS 边界规则0 | [BETWEEN 边界规则1 AND 边界规则2]，边界规则的可取值如下： current row：当前行 n preceding：当前行及往前n行数据 unbounded preceding：第一行至当前行数据 n following：当前行及往后n行数据 unbounded following：当前行至最后一行数据 需要注意的是， 使用框架时必须有order by子句 若仅有order by子句而未指定框架，则默认框架语句为range unbounded preceding and current row，详情见文章 4）window_name给窗口指定一个别名WINDOW my_window_name AS (PARTITION BY uid ORDER BY score)，适用于一个窗口被多次使用，可以使sql简洁清晰，也易于维护 12345678910SELECT uid, score, rank() OVER my_window_name AS rk_num, row_number() OVER my_window_name AS row_num, dense_rank() OVER my_window_name AS dr_numFROM exam_recordWHERE score&gt;=60ORDER BY uidWINDOW my_window_name AS (PARTITION BY uid ORDER BY score) 窗口函数分类窗口函数： first_value: 返回计算窗口内按排序条件的第一个值，语法first_value(exp_str,true|false) last_value: 返回计算窗口内按排序条件的最后一个值，语法last_value(exp_str,true|false) lag: 返回相对当前行，第前n行的数据，语法lag(exp_str,offset,defval) over(partition by .. order by …) lead: 返回相对当前行，第后n行的数据，语法lead(exp_str,offset,defval) over(partition by .. order by …) 配合over语句使用的聚合函数： sum count([distinct]) max min avg 分析函数： row_number: 连续排序——1、2、3、4 rank: 并列跳号排序——1、1、3、4 dense_rank: 并列连续排序——1、1、2、3 percent_rank: 将某个数值在数据集中的rank()排位作为数据集的百分比值返回，每行按照公式(rank-1) &#x2F; (rows-1)进行计算，百分比值的范围为 0 到 1。可用于计算值在数据集内的相对位置。语法percent_rank(exp_str) cume_dist: 如果按升序排列，则统计：小于等于当前值的行数&#x2F;总行数。 如果是降序排列，则统计：大于等于当前值的行数&#x2F;总行数。 语法cume_dist(exp_str) ntiles: 将分组数据按照顺序平均切分成n组，并返回当前切片值。语法ntiles(n)。 如果不能平均分配，则优先分配较小编号的切片，并且各个切片中能放的行数最多相差 1。 可简单理解为，有 n 个桶，按编号 1-n 的顺序逐个将分组数据放到每个桶内，直至数据分配完毕。","categories":[{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"}],"tags":[{"name":"hiveSQL","slug":"hiveSQL","permalink":"https://llye-hub.github.io/tags/hiveSQL/"}]},{"title":"读书笔记之数据仓库工具箱维度建模权威指南(第3版)","slug":"阅读笔记/读书笔记之数据仓库工具箱维度建模权威指南-第3版","date":"2023-03-29T06:31:37.000Z","updated":"2023-04-18T08:14:08.029Z","comments":true,"path":"posts/4142350a.html","link":"","permalink":"https://llye-hub.github.io/posts/4142350a.html","excerpt":"这是一篇加密文章，需要密码才能继续阅读。","text":"0ae7e196f2221a75e5346dcbb7e124f36deed831076312fa04e0c81d58c043c17806a367438824993e46b7303f74bdc06899039d442f1dff272c683baf86367d59975bd53c314a0a26cfb344bcaf0955fd1a96949fb90881a89c5466d073ccf3079528444191ba3b7975eb10c9892b3ab87a1929db01e83c2ced373629ea7d7b522274fa000b87cbb1ffc5f4cd0a2163692baf3198603c83fc2017ad663911086721b10335c346a0f7fa2fadf30bd4c89202939bc8ffdcaf64e0a8ce53a189fe98c981745ad7eff591794f0cefa3a43f3fa324a7a2c59eb4d187890612f49878d875f5d86f7f51a0adf3d7f4f62b57fb731c41d84cdc101787047618a756d65ad2bfc23c712c164a546439dcdf8fe9b32e47048cec51c77ab5be1657afa01891096e4fa678407c3894b49d1d43838862456520602e2832caabca4d3ec23903474a238253c1a7356aed30504b0eec8b9602131d82fb13828b25f262868f79bf5baee19d9ec3e9b1b3d1f2efab941c00c67d8fd0e7b6497868fd0334099418a396114716ac39e9b5c029f03b5d7872b3a3dec09a89637e468b00b611ff1209ad2dd7eae404346a4ff5a2fa571d47bb07dd9b4d8175dc7833db210e83f319c574dc3e1b6a6ef57cb4ec5a70b6e69a4df2026c547420a466aad158a57bfea4377243fe9e885efdf5de9e09b1029e9fcb0f19dae7de5f0738f1435ff397a3f57f08839923b0722399cd188f93a2fe43a68a12721d59fc924e9689c79645ed2e117e7e84d8f3765ba91ef99618d4d97a993ff05161ffafc35224bbbd9a3bc198c4c255f2d23dbe5b6363018bf8266f5168caa43e52201da907d9f185486b1e57a235f0bb02ad3e31e7611ae0723933d3443d7ed76af0ce8ce9def98be4717e1dab1b43df75cdfa4fa71a255977400a083a9a64e4bdd0f58e144452cb1043037e405fdd207e7f67fb9b3245d7a05b65e56da62026a7daeeb8f590388f0eed293daef43a192573d49d7270dc388dd31be65b27cb605eed5a6962df4298e846905d69f75cec5782bc4d2be875124baccc0db637587499ca209c37b5549aa0d158aefb40a8ec294d8264672de482211ae49fdd7e39f0c44e5dddbc0a9282091168693532c3273a7c73105807272e4b230b350ef638c53f003f4233539713da341a897ed2aa3cf86e12bc041a5dee723066d818412b426f2f08a5af56b8a979266c285da7f139854c82cd795ecdf6cc4c41b8f1ee1e3ba195ffb05ae923851807af515411ea30e58e404ba846501e68f3c3a3fae3a6f82b97a105eda1c162553a2b8e4b8d7c3eb57900f9b5cc9a9a94fa4b46cf82faacf18c4d9b8d7bc97551c3d2e4c47885ce23950d5ab3ee714750843e0bb4a2f68103da7f6a5d7559910c4cc3dbe952a0aaad169968b45110450987c1e36c8c702c7fd70ec40f9190f2001e327dc73e2cbf41d581a29fff80ece3e0b342486aab761d851649b5e6fad43b1c37c7ebfd18c1a489a121812d4b01e84bbc443920b8a540e7f08d9d07dfac01ab4fab2e78b0a534beaa090299fcfecd2fe0851c0568d25158b9436d0a53ae309b64698b6242506a8087cb9cfffd00b6b7a067beb29be108e936578b799560213f672d2691ff1f7baecdd0a236d6b81e4ad1e58789f8ca345c98b1ca0903c053c36dbb14a3e8e9a7f8b87c060db3f954cbb134f98309b247be77c256195dca13651bd62f137f 当前文章暂不对外可见，请输入密码后查看！","categories":[{"name":"阅读笔记","slug":"阅读笔记","permalink":"https://llye-hub.github.io/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"读书笔记","slug":"读书笔记","permalink":"https://llye-hub.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"private","slug":"private","permalink":"https://llye-hub.github.io/tags/private/"}]},{"title":"内置函数之reflect","slug":"SQL/内置函数之reflect","date":"2023-03-22T09:39:53.000Z","updated":"2023-03-29T03:43:07.269Z","comments":true,"path":"posts/1d24daf8.html","link":"","permalink":"https://llye-hub.github.io/posts/1d24daf8.html","excerpt":"","text":"","categories":[{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"}],"tags":[{"name":"内置函数","slug":"内置函数","permalink":"https://llye-hub.github.io/tags/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"}]},{"title":"搭建spark on yarn源码调试","slug":"spark/搭建spark-on-yarn源码调试","date":"2023-03-21T09:02:06.000Z","updated":"2023-03-29T03:43:07.272Z","comments":true,"path":"posts/5e1f3fb0.html","link":"","permalink":"https://llye-hub.github.io/posts/5e1f3fb0.html","excerpt":"","text":"参考文章Spark3.0.1各种集群模式搭建及spark on yarn日志配置Spark on Yarn集群搭建详细过程 环境准备jdk8+Hadoop3.3.1 spark的几种部署方式Spark作为准实时大数据计算引擎，Spark的运行需要依赖资源调度和任务管理，Spark自带了standalone模式资源调度和任务管理工具，运行在其他资源管理和任务调度平台上，如Yarn、Mesos、Kubernates容器等。 spark的搭建和Hadoop差不多，主要有下面几种部署方式： Local：多用于本地测试，如在eclipse，idea中写程序测试等。 Standalone：Standalone是Spark自带的一个资源调度框架，它支持完全分布式。 Yarn：Hadoop生态圈里面的一个资源调度框架，Spark也是可以基于Yarn来计算的。 基于个人学习需求，本文仅记录Local模式部署过程。 下载spark源码下载地址 解压 1tar -zcvf spark-3.2.0-bin-hadoop3.2.tgz 配置环境变量 1234567# 编辑# SPARK_HOME=/Users/llye/workspace/spark-3.2.0-bin-hadoop3.2 # export PATH=$SPARK_HOME/bin:$PATHvi ~/.bash_profile # 生效source ~/.bash_profile 本地local模式测试样例 12cd $SPARK_HOME/bin run-example SparkPi 10 # 可计算出结果 1spark-shell # 启动成功，说明Local模式部署成功 启动成功后，访问http://localhost:4040/ 即可进行web UI监控页面访问 Standalone模式（未完成，不具参考性）配置Spark on Yarn集群 修改spark-env.sh文件 12345678910111213cd $SPARK_HOME/confcat &gt; spark-env.sh &lt;&lt; EOFJAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_301.jdk/Contents/Home/SCALA_HOME=/Users/llye/soft/scala/HADOOP_HOME=/Users/llye/soft/hadoop-3.3.1/HADOOP_CONF_DIR=/Users/llye/soft/hadoop-3.3.1/etc/hadoop/YARN_CONF_DIR=/Users/llye/soft/hadoop-3.3.1/etc/hadoop/etc/hadoop/SPARK_MASTER_HOST=spark # 主节点机器名称SPARK_MASTER_PORT=7077 # 默认端口号7077SPARK_HOME=/Users/llye/workspace/spark-3.2.0-bin-hadoop3.2/SPARK_LOCAL_DIRS=/Users/llye/workspace/spark-3.2.0-bin-hadoop3.2/SPARK_LIBARY_PATH=/Library/Java/JavaVirtualMachines/jdk1.8.0_301.jdk/Contents/Home/lib/:/Users/llye/soft/hadoop-3.3.1/lib/native/EOF 修改slaves配置文件 1234cd $SPARK_HOME/sbin vi slaves# spark001# spark002 将spark目录发送到其他机器 创建workers文件，指定Worker节点： 123456cd $SPARK_HOME/confcat &gt; workers &lt;&lt; EOFworker1worker2worker3EOF 启动Spark on Yarn集群1cd $SPARK_HOME/sbin 在Spark节点上启动Spark Master节点： 1start-master.sh 在Worker节点上启动Spark Worker节点： 1start-worker.sh spark://spark:7077 登录Spark on Yarn集群登录Master： 登录Worker：http://localhost:8081/","categories":[{"name":"spark","slug":"spark","permalink":"https://llye-hub.github.io/categories/spark/"}],"tags":[{"name":"spark on yarn","slug":"spark-on-yarn","permalink":"https://llye-hub.github.io/tags/spark-on-yarn/"}]},{"title":"hive本机安装","slug":"hive/hive本机安装","date":"2023-03-15T02:49:23.000Z","updated":"2023-05-05T03:32:22.681Z","comments":true,"path":"posts/47d5b7b0.html","link":"","permalink":"https://llye-hub.github.io/posts/47d5b7b0.html","excerpt":"","text":"参考文章 Hive源码系列（一）hive2.1.1+hadoop2.7.3环境搭建 Hive安装超详细教程 Hive架构与源码分析 Hive:源码解析之本地环境搭建 环境准备 jdk8 + Hadoop3.3.1 下载安装 下载地址 解压安装包 1tar -zxvf apache-hive-2.3.9-bin.tar.gz 环境变量配置 12345678910# 编辑# HIVE_HOME=/Users/llye/soft/hive-2.3.9# export PATH=$HIVE_HOME/bin:$PATHvi ~/.bash_profile # 生效source ~/.bash_profile# 验证hive --version 修改配置文件 1cd $HIVE_HOME/conf vi hive-site.xml编辑内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&lt;configuration&gt; &lt;!-- 以mysql作为hive元数据库 --&gt; &lt;property&gt; &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt; &lt;value&gt;jdbc:mysql://localhost:3306/hivedb?createDatabaseIfNotExist=true&amp;amp;characterEncoding=UTF-8&amp;amp;useSSL=false&amp;amp;serverTimezone=GMT&lt;/value&gt; &lt;description&gt;hive metastore连接串&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt; &lt;value&gt;com.mysql.cj.jdbc.Driver&lt;/value&gt; &lt;description&gt;Hive metastore JDBC驱动&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt; &lt;value&gt;root&lt;/value&gt; &lt;description&gt;Mysql登录账号&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt; &lt;value&gt;rootroot&lt;/value&gt; &lt;description&gt;Mysql登录密码&lt;/description&gt; &lt;/property&gt; &lt;!-- 忽略HIVE 元数据库版本的校验，如果非要校验就得进入MYSQL升级版本 --&gt; &lt;property&gt; &lt;name&gt;hive.metastore.schema.verification&lt;/name&gt; &lt;value&gt;false&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hive.cli.print.current.db&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hive.cli.print.header&lt;/name&gt; &lt;value&gt;true&lt;/value&gt; &lt;/property&gt; &lt;!-- 配置hive用户名、密码 --&gt; &lt;property&gt; &lt;name&gt;hive.jdbc_passwd.auth.root&lt;/name&gt; &lt;value&gt;rootroot&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hive.jdbc_passwd.auth.llye&lt;/name&gt; &lt;value&gt;rootroot&lt;/value&gt; &lt;/property&gt; &lt;!-- hiveserver2 --&gt; &lt;!-- 配置用户安全认证方式 --&gt; &lt;property&gt; &lt;name&gt;hive.server2.authentication&lt;/name&gt; &lt;value&gt;NONE&lt;/value&gt; &lt;description&gt; Expects one of [nosasl, none, ldap, kerberos, pam, custom]. Client authentication types. NONE: no authentication check LDAP: LDAP/AD based authentication KERBEROS: Kerberos/GSSAPI authentication CUSTOM: Custom authentication provider (Use with property hive.server2.custom.authentication.class) PAM: Pluggable authentication module NOSASL: Raw transport &lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hive.server2.custom.authentication.class&lt;/name&gt; &lt;value&gt;org.apache.hadoop.hive.contrib.auth.CustomPasswdAuthenticator&lt;/value&gt; &lt;description&gt;配置用于权限认证的类【这里实际没有】&lt;/description&gt; &lt;/property&gt; &lt;!-- 指定 hiveserver2 jdbc连接的 host+port --&gt; &lt;property&gt; &lt;name&gt;hive.server2.thrift.bind.host&lt;/name&gt; &lt;value&gt;localhost&lt;/value&gt; &lt;description&gt;hiveserver2 jdbc连接的 host&lt;/description&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hive.server2.thrift.port&lt;/name&gt; &lt;value&gt;10000&lt;/value&gt; &lt;description&gt;hiveserver2 jdbc连接的端口号&lt;/description&gt; &lt;/property&gt; &lt;!-- 配置webUI界面 host+port --&gt; &lt;property&gt; &lt;name&gt;hive.server2.webui.host&lt;/name&gt; &lt;value&gt;localhost&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hive.server2.webui.port&lt;/name&gt; &lt;value&gt;10002&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 下载连接MySQL的驱动包到hive的lib目录下 mysql-connector-java-8.0.17.jar下载地址 初始化hive元数据库 12cd $HIVE_HOME/binschematool -initSchema -dbType mysql -verbose 验证初始化是否成功 12-- mysql的hivedb库中，若展示多个数据表，即代表初始化成功show tables; 启动hive 1234$HADOOP_HOME/sbin/start-dfs.sh &amp;$HADOOP_HOME/sbin/start-yarn.shcd $HIVE_HOME hive 遇到启动报错org.apache.hadoop.hdfs.server.namenode.SafeModeException): Cannot create directory /tmp/hive时，执行命令hdfs dfsadmin -safemode leave关闭HDFS安全模式 验证 123456-- 建表create table student(id int, name string);-- 插入数据insert into table student values(1, &#x27;abc&#x27;);-- 查询数据select * from student; beeline连接hiveserver2 hadoop配置 1cd $HADOOP_HOME/etc/hadoop vi core-site.xml补充内容如下： 12345678910111213141516&lt;property&gt; &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt; &lt;value&gt;*&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt; &lt;value&gt;*&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;hadoop.proxyuser.llye.groups&lt;/name&gt; &lt;value&gt;*&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;hadoop.proxyuser.llye.hosts&lt;/name&gt; &lt;value&gt;*&lt;/value&gt;&lt;/property&gt; 重启hadoop 12$HADOOP_HOME/sbin/stop-all.sh &amp;$HADOOP_HOME/sbin/start-all.sh 启动metastore 配置了hive的环境变量，任意文件夹下执行即可 1hive --service metastore 启动hiveserver2 配置了hive的环境变量，任意文件夹下执行即可 123hiveserver2# 或hive --service hiveserver2 若hiveserver2启动失败，检查1000端口是否被占用，命令lsof -i:10000和kill -9 xxx beeline连接 1234beelinebeeline&gt; !connect jdbc:hive2://localhost:10000/default# 或beeline -u jdbc:hive2://localhost:10000/default 遇到报错问题的参考： beeline连接hiveserver2报错：User: root is not allowed to impersonate root Hive JDBC：Permission denied: user=anonymous, access=EXECUTE, inode=”/tmp” 客户端jdbc连接hive库 启动metastore和hiveserver2 12345hive --service metastorehiveserver2# 或hive --service hiveserver2 DBeaver连接，设置jdbc URL：jdbc:hive2://localhost:10000/default hive源码编译 解压安装包 1tar -zxvf apache-hive-2.3.9-src.tar.gz 编译源码 进入解压目录 1mvn clean package -DskipTests -Phadoop-2 -Pdist 编译过程中报错An error has occurred in JavaDocs report generation:Exit code: 1 - javadoc: error - invalid flag: -author，解决方案: 1234567891011121314151617181920212223242526&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;maven.javadoc.plugin.version&#125;&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;resourcesdoc.xml&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;javadoc&lt;/goal&gt; &lt;/goals&gt; &lt;phase&gt;compile&lt;/phase&gt; &lt;configuration&gt; &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;show&gt;public&lt;/show&gt; &lt;doclet&gt;com.sun.jersey.wadl.resourcedoc.ResourceDoclet&lt;/doclet&gt; &lt;docletArtifacts&gt; …… &lt;/docletArtifacts&gt; &lt;additionalparam&gt;-output $&#123;project.build.outputDirectory&#125;/resourcedoc.xml&lt;/additionalparam&gt; &lt;!-- pom文件中加上此项配置 --&gt; &lt;useStandardDocletOptions&gt;false&lt;/useStandardDocletOptions&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 导入idea 从hive的解压目录中选择pom.xml文件导入 调试代码 进入解压目录 123cd packaging/target/apache-hive-2.3.9-bin/apache-hive-2.3.9-binhive --debug -hiveconf hive.root.logger=DEBUG,console 成功时，界面出现： 1Listening for transport dt_socket at address: 8000 JVM会监听8000端口，等待客户端调试连接。 进入idea配置远程连接如下： hive的CLI的入口类为：src/java/org/apache/hadoop/hive/cli/CliDriver.java，断点调试成功如下：","categories":[{"name":"hive","slug":"hive","permalink":"https://llye-hub.github.io/categories/hive/"}],"tags":[{"name":"hive安装","slug":"hive安装","permalink":"https://llye-hub.github.io/tags/hive%E5%AE%89%E8%A3%85/"}]},{"title":"hadoop本机安装","slug":"hadoop/hadoop本机安装","date":"2023-03-15T02:49:02.000Z","updated":"2023-05-05T02:56:45.176Z","comments":true,"path":"posts/2cb81866.html","link":"","permalink":"https://llye-hub.github.io/posts/2cb81866.html","excerpt":"","text":"参考文章 Hive源码系列（一）hive2.1.1+hadoop2.7.3环境搭建 Hadoop【单机安装-测试程序WordCount】 Hadoop 安装有三种方式： 单机模式：安装简单，几乎不用做任何配置，但仅限于调试用途； 伪分布模式：在单节点上同时启动 NameNode、DataNode、JobTracker、TaskTracker、Secondary Namenode 等 5 个进程，模拟分布式运行的各个节点； 完全分布式模式：正常的 Hadoop 集群，由多个各司其职的节点构成。 本人选择的是伪分布模式安装 下载安装 下载地址 解压安装包 1tar -zxvf hadoop-3.3.1.tar.gz 环境变量配置 12345678910# 编辑# HADOOP_HOME=/Users/llye/soft/hadoop-3.3.1# export PATH=$HADOOP_HOME/bin:$PATHvi ~/.bash_profile # 生效source ~/.bash_profile# 验证hadoop version 修改配置文件 1cd $HADOOP_HOME/etc/hadoop vi core-site.xml编辑内容如下： 1234567&lt;configuration&gt;&lt;!-- 配置分布式文件系统的schema和ip以及port,默认8020--&gt;&lt;property&gt;&lt;name&gt;fs.defaultFS&lt;/name&gt;&lt;value&gt;hdfs://localhost:8020&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt; vi hdfs-site.xml编辑内容如下： 1234567&lt;configuration&gt;&lt;!-- 配置副本数，注意，伪分布模式只能是1。--&gt;&lt;property&gt;&lt;name&gt;dfs.replication&lt;/name&gt;&lt;value&gt;1&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt; vi hadoop-env.sh编辑内容如下： 1export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_301.jdk/Contents/Home vi mapred-site.xml编辑内容如下： 12345678910111213141516171819&lt;configuration&gt;&lt;property&gt;&lt;name&gt;mapreduce.framework.name&lt;/name&gt;&lt;value&gt;yarn&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;yarn.app.mapreduce.am.env&lt;/name&gt; &lt;value&gt;HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;mapreduce.map.env&lt;/name&gt; &lt;value&gt;HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;&lt;/value&gt;&lt;/property&gt;&lt;property&gt; &lt;name&gt;mapreduce.reduce.env&lt;/name&gt; &lt;value&gt;HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt; vi yarn-site.xml编辑内容如下： 12345678&lt;configuration&gt;&lt;!-- Site specific YARN configuration properties --&gt;&lt;property&gt;&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;&lt;value&gt;mapreduce_shuffle&lt;/value&gt;&lt;/property&gt;&lt;/configuration&gt; ssh免密码登录 123ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsacat ~/.ssh/id_rsa.pub&gt;&gt; ~/.ssh/authorized_keyschmod 0600~/.ssh/authorized_keys 以前安装其他软件已操作过，所以此步骤忽略 格式化namenode 1hdfs namenode -format 忽略SHUTDOWN_MSG: Shutting down NameNode at localhost/127.0.0.1 有INFO common.Storage: Storage directory /tmp/hadoop-llye/dfs/name has been successfully formatted.即说明操作成功。 启动 12$HADOOP_HOME/sbin/start-dfs.sh &amp;$HADOOP_HOME/sbin/start-yarn.sh 验证 12345678910root@localhost hadoop % jps11440 11169 74514 NameNode # 名称节点74756 SecondaryNameNode74999 ResourceManager75098 NodeManager75834 Jps19771 Launcher74620 DataNode # 数据节点 访问UI：ip+port All Applications：http://localhost:8088/cluster/apps Applications running on this node：http://localhost:8042/node/allApplications Browse Hdfs：http://localhost:9870/ 这里需要注意的是，因为安装的是3.x版本，所以端口号为9870 若安装的是2.x版本，则端口号为50070 测试程序 测试一 12cd $HADOOP_HOMEhadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.1.jar pi 2 100 测试二 123456789101112131415161718192021222324252627cd $HADOOP_HOME# 创建一个hdfs目录hdfs dfs -mkdir /wordcount# 造数据# hello hadoop# hello world# hello hadoop# hello hangzhou# hello hangzhou# hello hadoopmkdir wordCountcd wordCounttouch wc.inputvi wc.inputcat wc.input# 上传本地文件到指定目录hdfs dfs -put wc.input /wordcount# 运行mr程序cd $HADOOP_HOMEhadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.3.1.jar wordcount /wordcount/ /wordcount/output# 查看mr计算结果hadoop fs -cat /wordcount/output/part-r-00000 停止 12$HADOOP_HOME/sbin/stop-dfs.sh &amp;$HADOOP_HOME/sbin/stop-yarn.sh 补充：hadoop启动会遇到的问题 namenode启动失败，使用jps命令查看时无namenode进程 解决办法： 执行命令hdfs namenode -format重新格式化namenode 执行命令hadoop-daemon.sh start namenode单独启动namenode，若是其他哪个进程挂了也可以采取这种方式。（本地尚未试过这种解决方式） 修改core-site.xml和hdfs-site.xml配置，再重新格式化namenode。因为系统重启后namenode和datanode的信息被清理了 core-site.xml补充配置如下： &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;/Users/llye/hadoop/tmp&lt;/value&gt; &lt;description&gt;Abase for other temporary directories.&lt;/description&gt; &lt;/property&gt; hdfs-site.xml补充配置如下： &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;/Users/llye/hadoop/tmp/dfs/name&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt; &lt;value&gt;/Users/llye/hadoop/tmp/dfs/data&lt;/value&gt; &lt;/property&gt; 若执行命令hdfs namenode -format报错： 上面报错原因是权限不够，无法再目录内新建文件，解决办法是执行命令sudo chmod -R a+w /Users/llye/hadoop，再格式化namenode就ok了。 修改配置后，系统启动后会默认路径下的文件作为namenode、datanode的配置信息","categories":[{"name":"hadoop","slug":"hadoop","permalink":"https://llye-hub.github.io/categories/hadoop/"}],"tags":[{"name":"hadoop安装","slug":"hadoop安装","permalink":"https://llye-hub.github.io/tags/hadoop%E5%AE%89%E8%A3%85/"}]},{"title":"终端常用命令汇总","slug":"shell/终端常用命令汇总","date":"2023-03-15T02:29:05.000Z","updated":"2023-03-21T08:09:18.234Z","comments":true,"path":"posts/84fddb38.html","link":"","permalink":"https://llye-hub.github.io/posts/84fddb38.html","excerpt":"","text":"获取本机ip地址12345678910#!/bin/shlocal_ip=`ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk &#x27;&#123;print $2&#125;&#x27;|tr -d &quot;addr:&quot;​`echo &quot;$&#123;local_ip&#125;&quot;ifconfig -a //和window下执行此命令一样道理，返回本机所有ip信息grep inet //截取包含ip的行grep -v 127.0.0.1 //去掉本地指向的那行grep -v inet6 //去掉包含inet6的行awk &#123; print $2&#125; //$2 表示默认以空格分割的第二组 同理 $1表示第一组​tr -d &quot;addr:&quot; //删除&quot;addr:&quot;这个字符串 https://blog.csdn.net/finghting321/article/details/108476650 查找文件1find / -iname $filename 2&gt; /dev/null","categories":[{"name":"shell","slug":"shell","permalink":"https://llye-hub.github.io/categories/shell/"}],"tags":[{"name":"shell命令","slug":"shell命令","permalink":"https://llye-hub.github.io/tags/shell%E5%91%BD%E4%BB%A4/"}]},{"title":"终端免密登录mysql","slug":"shell/终端免密登录mysql","date":"2023-03-14T07:29:49.000Z","updated":"2023-03-14T08:04:15.277Z","comments":true,"path":"posts/b31f5f52.html","link":"","permalink":"https://llye-hub.github.io/posts/b31f5f52.html","excerpt":"","text":"参考资料：Mysql Shell免密登录的思考及实际应用案例 常见终端登录mysql的方式是通过命令mysql -u&#123;user&#125; -p&#123;password&#125;，每次登录都需要输入一长串命令和参数，我觉得麻烦，且这种方式下密码直接暴露出来是不安全的 虽然也可用命令mysql -u&#123;user&#125; -p + 手动输入密码，也是麻烦的，而且还要记密码 所以，如果仅用命令mysql即可实现登录，那得多方便 从网上搜索后发现，可以通过明文配置文件的方式实现mysql免密登录 具体命令如下： 1234567891011121314# 编辑配置文件# [mysql]# user=xxx# password=xxxsudo vi /etc/my.cnf# 查看文件内容cat /etc/my.cnf# 指定mysql server仅从这个配置文件读取参数mysql --defaults-file=/etc/my.cnf# 验证读取配置情况mysql --defaults-file=/etc/my.cnf --print-defaults","categories":[{"name":"shell","slug":"shell","permalink":"https://llye-hub.github.io/categories/shell/"}],"tags":[{"name":"免密登录","slug":"免密登录","permalink":"https://llye-hub.github.io/tags/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"}]},{"title":"sql练习之连续登录问题","slug":"题集/sql练习之连续登录问题","date":"2023-03-10T08:22:38.000Z","updated":"2023-03-13T02:51:54.944Z","comments":true,"path":"posts/67cc9ac.html","link":"","permalink":"https://llye-hub.github.io/posts/67cc9ac.html","excerpt":"","text":"题目来源 题目要求求出连续3天登录的用户id 数据12345678910111213141516CREATE TABLE if not exists one.user_login( id int COMMENT &#x27;用户主键&#x27;, dt varchar(20) COMMENT &#x27;登录日期&#x27; );insert into user_login values(1001,&#x27;2021-12-12&#x27;);insert into user_login values(1002,&#x27;2021-12-12&#x27;);insert into user_login values(1001,&#x27;2021-12-13&#x27;);insert into user_login values(1001,&#x27;2021-12-14&#x27;);insert into user_login values(1001,&#x27;2021-12-16&#x27;);insert into user_login values(1002,&#x27;2021-12-16&#x27;);insert into user_login values(1001,&#x27;2021-12-19&#x27;);insert into user_login values(1002,&#x27;2021-12-17&#x27;);insert into user_login values(1001,&#x27;2021-12-20&#x27;); 解题解法一：自关联12345678910111213141516171819202122232425select distinct idfrom ( SELECT id from ( select a.id , a.dt as dt1 , b.dt as dt2 from user_login a left join user_login b on a.id = b.id and (b.dt between DATE_SUB(a.dt, interval 2 day) and a.dt) ) tmp1 group by id, dt1 having count(1) = 3 )tmp2;","categories":[{"name":"题集","slug":"题集","permalink":"https://llye-hub.github.io/categories/%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"sql练习","slug":"sql练习","permalink":"https://llye-hub.github.io/tags/sql%E7%BB%83%E4%B9%A0/"}]},{"title":"SQL之窗口函数的边界","slug":"SQL/SQL之窗口函数的边界","date":"2023-02-28T08:25:40.000Z","updated":"2023-03-01T07:30:20.176Z","comments":true,"path":"posts/5af52219.html","link":"","permalink":"https://llye-hub.github.io/posts/5af52219.html","excerpt":"","text":"前言窗口函数常用于在SQL数据分析计算各种统计指标，也是日常sql开发中常见的函数了，但是最近发现自己在这方面存在一些误解 比如下面这段sql 1234select col1 ,sum(col2) over(partition by col1 order by col3) as sum1 ,sum(col2) over(partition by col1) as sum2from (select * from (VALUES(&#x27;a&#x27;,1,4),(&#x27;a&#x27;,2,7),(&#x27;a&#x27;,3,6)) t(col1,col2,col3)) a 第一眼感觉sum1和sum2字段计算值是一样的，但实际运行出来的结果为(mysql+hiveSQL) col1 sum1 sum2 a 1 6 a 4 6 a 6 6 从执行结果上来看，sum1字段为窗口内的累加值，sum2字段值为窗口内所有值之和 为什么有无order by差异这么大有人会说，聚合函数sum()的窗口内有order by子句时，计算结果本就是累加性质。从执行结果上来看，这么说是对的，但是这种解释太流于表面，并没有真正从函数定义上解释为什么 这里重新回顾下窗口函数基本语法： 1&lt;window_function&gt; over (partition by &lt;column_name&gt; order by &lt;column_name&gt; &lt;window_frame&gt;) 主要有四个部分： window_function：函数，比如：sum、row_number、first_value partition by：窗口分区子句 order by：窗口排序子句 window_frame：窗口框架，限制窗口的边界大小 对照基本语法，有order by子句的执行结果就是计算窗口边界为起始行至当前行的sum结果，即sum(col2) over(partition by col1 order by col3)等同于sum(col2) over(partition by col1 order by col3 rows between unbounded preceding and current row) 窗口函数的官方说明mysql官方文档 hive官方文档 mysql关于窗口函数的window_frame有如下说明： hive关于窗口函数的window_frame有如下说明： 根据以上官方说明可知，当window_frame子句和order by子句都没有时，窗口计算默认包含窗口内的所有数据，即window_frame=ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING；当仅有order by子句，没有window_frame子句时，窗口计算默认仅包含排序后起始行至当前行的数据，即window_frame=ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW","categories":[{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"}],"tags":[{"name":"窗口函数","slug":"窗口函数","permalink":"https://llye-hub.github.io/tags/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/"}]},{"title":"关于Java PriorityQueue类的使用场景","slug":"题集/关于Java-PriorityQueue类的使用场景","date":"2023-02-23T08:53:35.000Z","updated":"2023-03-29T03:42:57.496Z","comments":true,"path":"posts/76a5661e.html","link":"","permalink":"https://llye-hub.github.io/posts/76a5661e.html","excerpt":"","text":"最近在leetcode刷题的时候，发现很多题推荐解法是用优先队列的特性，比如：滑动窗口的最大值 、丑数 以前完全没有用个这个类，所以在此整理一下对优先队列的认识和刷题场景 优先队列的特性很明显，优先队列也是一种队列，只不过其出队顺序和一般队列不同，优先队列的出队顺序是按照一定的优先级来的，也就是说出队规则可以随意定制 优先队列ADT是一种数据结构，它支持插入、删除最小值操作（返回并删除最小元素）、删除最大值操作（返回并删除最大元素） 优先队列的主要操作：优先队列是元素的容器，每个元素有一个相关的键值 insert(key, data)：插入键值为key的数据到优先队列中，元素以其key进行排序 deleteMin&#x2F;deleteMax：删除并返回最小&#x2F;最大键值的元素 getMinimum&#x2F;getMaximum：返回最小&#x2F;最大剑指的元素，但不删除它 优先队列的辅助操作： 第k最小&#x2F;第k最大：返回优先队列中键值为第k个最小&#x2F;最大的元素 大小（size）：返回优先队列中的元素个数 堆排序（Heap Sort）：基于键值的优先级将优先队列中的元素进行排序 在某些场景下，比如要求队列中的最小元素先出即可用优先队列，在java中的实现类为java.util.PriorityQueue。 认识下PriorityQueue类的方法创建对象12345678// 默认情况下，优先级队列的头是队列中最小的元素，元素将按升序从队列中移除PriorityQueue&lt;Integer&gt; nums = new PriorityQueue&lt;&gt;();// 借助 Comparator 接口自定义元素的顺序，头是队列中最大的元素，按降序从队列中移除PriorityQueue&lt;int[]&gt; win = new PriorityQueue&lt;int[]&gt;(new Comparator&lt;int[]&gt;() &#123; public int compare(int[] a, int[] b) &#123; return a[0] != b[0] ? b[0] - a[0] : b[1] - a[1]; &#125;&#125;); 插入元素：add、offer12345678910111213141516171819202122232425class Main &#123; public static void main(String[] args) &#123; //创建优先队列 PriorityQueue&lt;Integer&gt; numbers = new PriorityQueue&lt;&gt;(); //使用add()方法，如果队列已满，则会引发异常 numbers.add(4); numbers.add(2); System.out.println(&quot;PriorityQueue: &quot; + numbers); //使用offer()方法，如果队列已满，则返回false numbers.offer(1); System.out.println(&quot;更新后的PriorityQueue: &quot; + numbers); &#125;&#125;/* * 输出结果： * PriorityQueue: [2, 4] * 更新后的PriorityQueue: [1, 4, 2] * * 以上结果中，队列的头是最小元素 */ 访问元素：peek12345678//使用 peek() 方法int number = nums.peek();System.out.println(&quot;访问元素: &quot; + number);/* * 输出结果： * 访问元素: 1 */ 删除元素：remove、poll12345678910111213//使用remove()方法，从队列中删除指定的元素boolean result = numbers.remove(2);System.out.println(&quot;元素2是否已删除? &quot; + result);//使用poll()方法，返回并删除队列的头int number = numbers.poll();System.out.println(&quot;使用poll()删除的元素: &quot; + number);/* * 输出结果： * 元素2是否已删除? true * 使用poll()删除的元素: 1 */ 是否包含元素：contains12345678//使用contains()方法，从队列中搜索指定的元素，找到则返回true，否则false。boolean result = numbers.contains(4);System.out.println(&quot;队列中是否有元素 4 ？&quot; + result);/* * 输出结果： * 队列中是否有元素 4 ？ true */ 刷题场景滑动窗口的最大值123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。 //示例: //输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3//输出: [3,3,5,5,6,7] //解释:// 滑动窗口的位置 最大值//--------------- -----//[1 3 -1] -3 5 3 6 7 3// 1 [3 -1 -3] 5 3 6 7 3// 1 3 [-1 -3 5] 3 6 7 5// 1 3 -1 [-3 5 3] 6 7 5// 1 3 -1 -3 [5 3 6] 7 6// 1 3 -1 -3 5 [3 6 7] 7import java.util.Comparator;import java.util.PriorityQueue;/* * 解题思路：利用优先队列的特性，规定堆顶元素就是窗口最大值 * */class Solution &#123; public int[] maxSlidingWindow(int[] nums, int k) &#123; int len = nums.length; PriorityQueue&lt;int[]&gt; win = new PriorityQueue&lt;int[]&gt;(new Comparator&lt;int[]&gt;() &#123; // 重新定义出队规则 @Override public int compare(int[] a, int[] b) &#123; return a[0] != b[0] ? b[0] - a[0] : b[1] - a[1]; &#125; &#125;); // 初始化窗口 for (int i = 0; i &lt; k; ++i) &#123; win.offer(new int[]&#123;nums[i], i&#125;); &#125; // 创建指定长度的结果数组 int[] res = new int[len-k+1]; // 第一个窗口的最大值 res[0] = win.peek()[0]; // 遍历滑动窗口 for (int i = k; i &lt; len; ++i) &#123; // 添加新元素 win.offer(new int[]&#123;nums[i], i&#125;); // 删除窗口长度外的元素 while (win.peek()[1] &lt;= i - k) &#123; win.poll(); &#125; // 返回当前窗口的最大值 res[i - k + 1] = win.peek()[0]; &#125; return res; &#125;&#125; 丑数12345678910111213141516171819202122232425262728293031323334353637383940// 我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。// 示例: // 输入: n = 10// 输出: 12// 解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。 // 说明:// 1 是丑数。 // n 不超过1690。import java.util.HashSet;import java.util.PriorityQueue;import java.util.Set;/* * 解题思路：最小堆，需借助java的PriorityQueue类的特性实现：https://www.cainiaojc.com/java/java-priorityqueue.html * 初始化堆，将最小丑数1放入堆 * 每次取出堆顶元素x，x元素也是堆中最小的丑数，需排除重复元素，依次将 2x,3x,5x 加入堆 * 第n次取出的堆顶元素就是第n个丑数 * */class Solution &#123; public int nthUglyNumber(int n) &#123; int[] factors = &#123;2,3,5&#125;; PriorityQueue&lt;Long&gt; heap = new PriorityQueue&lt;Long&gt;(); //优先级队列的头是队列中最小的元素 heap.offer(1L); // 初始化最小堆，放入最小丑数1 int ugly = 0; for(int i=0; i&lt;n; i++)&#123; long cur = heap.poll(); //返回并删除队列的头，即最小元素 ugly = (int) cur; for (int factor : factors)&#123; long next = cur*factor; //检查是否有重复元素 if(!heap.contains(next))&#123; heap.offer(next); &#125; &#125; &#125; return ugly; &#125;&#125; 数据流中的中位数1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/* 解题思路：优先队列* 利用优先队列的特性实现，队头是最大值* */class MedianFinder &#123; // 初始化两个优先队列，分别存放 小于等于 和 大于 中位数的数值 PriorityQueue&lt;Integer&gt; queueMin; PriorityQueue&lt;Integer&gt; queueMax; /** initialize your data structure here. */ public MedianFinder() &#123; // queueMin队头为队列最大值，queueMax对头为队列最小值 queueMin = new PriorityQueue&lt;Integer&gt;((a,b) -&gt;(b-a)); queueMax = new PriorityQueue&lt;Integer&gt;((a,b) -&gt;(a-b)); &#125; public void addNum(int num) &#123; // num小于等于中位数，则num放入queueMin队列；num大于中位数，则num放入queueMax队列 // 注意if条件语句的先后顺序很重要 if (queueMin.isEmpty() || num &lt;= queueMin.peek()) &#123; queueMin.add(num); // queueMin队列大小超出，则将max(queueMin)元素放入queueMax队列 if (queueMin.size() &gt; queueMax.size() + 1) &#123; queueMax.add(queueMin.poll()); &#125; &#125; else &#123; queueMax.add(num); // queueMax队列大小超出，则将min(queueMin)元素放入queueMin队列 if (queueMax.size() &gt; queueMin.size()) &#123; queueMin.add(queueMax.poll()); &#125; &#125; &#125; public double findMedian() &#123; // 从数据流中读出奇数个数值 if (queueMin.size() &gt; queueMax.size()) &#123; return queueMin.peek(); &#125; // 从数据流中读出偶数个数值 return (queueMin.peek() + queueMax.peek()) / 2.0; &#125;&#125;/** * Your MedianFinder object will be instantiated and called as such: * MedianFinder obj = new MedianFinder(); * obj.addNum(num); * double param_2 = obj.findMedian(); */ 参考资料数据结构与算法(4)——优先队列和堆 Java PriorityQueue","categories":[{"name":"题集","slug":"题集","permalink":"https://llye-hub.github.io/categories/%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"java","slug":"java","permalink":"https://llye-hub.github.io/tags/java/"},{"name":"数据结构","slug":"数据结构","permalink":"https://llye-hub.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"hive、Spark和Maxcompute的SQL语法对比分析","slug":"SQL/hive、Spark和Maxcompute的SQL语法对比分析","date":"2023-02-21T02:33:16.000Z","updated":"2023-02-22T06:42:32.480Z","comments":true,"path":"posts/e6b1209.html","link":"","permalink":"https://llye-hub.github.io/posts/e6b1209.html","excerpt":"","text":"having 差异差异点hive和spark支持窗口函数后带havingmaxcomputer 的having语法只支持 在 group 和 distinct 后使用 举例1234select order_id,sum(trd_amt) over(partition by province) as trd_amt_stdfrom orderhaving trd_amt_std&gt;0 以上sql在hive中可以运行，但是在maxcomputer中会提示错误，错误如下： 替换方案在语句中使用子查询，将having替换为where 1234567select *from(select order_id,sum(trd_amt) over(partition by province) as trd_amt_stdfrom order) awhere a.trd_amt_std&gt;0 maxcomputer - cross join 超过一定条数后，依然会提示笛卡尔积风险差异点hive可以使用 cross join语法来表示笛卡尔积关联maxcomputer 的cross join，在条数超过一定数据量后，会提示笛卡尔积风险 举例1234567select a.*,b.*from(select * from table_a) across join(select * from table_b) b 以上sql在hive中可以运行，但是在maxcomputer中会提示错误，错误如下： 替换方案在左右笛卡尔积表中新增常量字段，用于关联 12345678select a.*,b.*from(select *,1 as cro_col from table_a) across join(select *,1 as cro_col from table_b) bon a.cro_col=b.cro_col 不等值join 差异差异点1、spark 支持不等值join语法2、hive 2.2.0版本之前不支持不等值语法，2.2.0及以后支持不等值join语法3、maxcomputer不支持不等值语法 举例测试sql 12345678910111213141516171819202122232425with table_a as (select 1 as id_a,&#x27;testa&#x27; as value_a union all select 4 as id_a ,&#x27;testd&#x27; as value_a),table_b as (select 3 as id_b,&#x27;testc&#x27; as value_b union all select 2 as id_b ,&#x27;testb&#x27; as value_b)select table_a.id_a,table_a.value_a,table_b.id_b,table_b.value_bfrom table_aleft join table_bon table_a.id_a &lt; table_b.id_b sql说明 :该sql准备了两张表table_a和table_b用于连接测试使用left join on语法，但是关联关系使用的是 &lt; 不等值关联符号 maxcomputer运行结果maxcomputer会报异常： FAILED: ODPS-0130071:[15,4] Semantic analysis exception - expect equality expression (i.e., only use ‘&#x3D;’ and ‘AND’) for join condition without mapjoin hint 提示的是期望join的是等值表达式 hive1.2.1运行结果 hive会报错： Error while compiling statement: FAILED: SemanticException [Error 10017]: line 15:3 Both left and right aliases encountered in JOIN ‘id_b’ 提示的是在join中遇到左右别名 不得不说，hive的错误信息有点云里雾里，其实就是不等值join造成的。 hive2.2.3运行结果 hive 2.2.0+版本顺利得到正确结果 spark运行结果 spark2.3也顺利得到结果 替换方案针对不等值join的替换方案有两种 1、针对小表，使用mapjoin，避免join操作 2、将on的不等值关联语句放入where语句中 由于mapjoin避免shuffle，性能较好，再可以的情况下，优先使用方案1 1、针对小表，使用mapjoin，避免join操作maxcomputer中的mapjoin hint语法为： &#x2F;*+ mapjoin() *&#x2F; ，详情请查看mapjoin hint 12345678910111213141516with table_a as (select 1 as id_a,&#x27;testa&#x27; as value_a),table_b as (select 2 as id_b,&#x27;testb&#x27; as value_b)select /*+ mapjoin(table_b) */table_a.id_a,table_a.value_a,table_b.id_b,table_b.value_bfrom table_aleft join table_bon table_a.id_a&lt;table_b.id_b 可以看到，使用mapjoin hint语法后，sql在maxcomputer中运行正确，顺利拿到了预期结果 2、将on的不等值关联语句放入where语句中inner join 比较简单 12345678910111213141516171819202122232425262728293031with table_a as (select 1 as id_a,&#x27;testa&#x27; as value_a,1 as join_col union all select 4 as id_a ,&#x27;testd&#x27; as value_a ,1 as join_col),table_b as (select 2 as id_b,&#x27;testb&#x27; as value_b,1 as join_col union all select 3 as id_b ,&#x27;testc&#x27; as value_b ,1 as join_col)selecttable_a.id_a,table_a.value_a,table_b.id_b,table_b.value_bfrom table_ainner join table_bon table_a.join_col=table_b.join_colwhere table_a.id_a&lt;table_b.id_b 可以看到，将&lt;判断语句放入where后，sql在maxcomputer运行正确，顺利拿到了预期结果 left join 比较复杂，建议使用map hint，实在没办法在使用此方案 123456789101112131415161718192021222324252627282930313233343536373839404142with table_a as (select 1 as id_a,&#x27;testa&#x27; as value_a,1 as join_col union all select 4 as id_a ,&#x27;testd&#x27; as value_a ,1 as join_col),table_b as (select 2 as id_b,&#x27;testb&#x27; as value_b,1 as join_col union all select 3 as id_b ,&#x27;testc&#x27; as value_b ,1 as join_col)-- 能关联上的部分,join_part as (selecttable_a.id_a,table_a.value_a,table_b.id_b,table_b.value_bfrom table_ainner join table_bon table_a.join_col=table_b.join_colwhere table_a.id_a&lt;table_b.id_b)-- 以自己为主表，left join能关联上的部分，实现 left join不等值效果select table_a.id_a,table_a.value_a,join_part.id_b,join_part.value_bfrom table_aleft join join_parton table_a.id_a=join_part.id_a 可以看到，将&lt;判断语句放入where后，sql在maxcomputer运行正确，顺利拿到了预期结果 array_contains 差异差异点spark的array_contains支持类型的隐式转换hive和maxcomputer array_contains不支持，只支持同类型使用 举例测试sql 1select array_contains(split(&quot;1,2,3,4&quot;,&quot;,&quot;),1) sql说明该sql首先使用split一个字符串获取一个array对象用于测试，之后使用array_contains函数进行判断split后的array对象为一个string数组，而判断被包含的数字【1】为一个int 对象 maxcomputer运行结果maxcomputer会报异常： FAILED: ODPS-0130071:[1,44] Semantic analysis exception - invalid type INT of argument 2 for function array_contains, expect STRING, implicit conversion is not allowed 提示的是array_contains第二个参数期望的是string，但是传入的是int，隐式类型转换不支持 hive运行结果 hive会报错： Error while compiling statement: FAILED: SemanticException [Error 10016]: line 1:43 Argument type mismatch ‘1’: “string” expected at function ARRAY_CONTAINS, but “int” is found 提示的是array_contains函数期望的是string，但是传入的是int，类型不匹配 spark运行结果 spark能顺利产出结果，结果为true，那么为什么spark可以成功呢？ 大概率是spark智能的将1从int转换为了string类型，使得类型得以匹配，通过explain查看物理执行计划来验证 在上图标红的地方可以看到，spark在物理执行计划层面，将int的1隐式的转换为了string类型，验证了我们一开始的猜想。 替换方案既然知道了在hive和maxcomputer中是类型不匹配导致的array_contains函数报错，那么只需要显示的将类型进行转换即可 1select array_contains(split(&quot;1,2,3,4&quot;,&quot;,&quot;),cast(1 as string)) 字段类型转换 ARRAY&lt;&gt; to STRING差异点spark的array_contains支持类型的隐式转换 hive和maxcomputer array_contains不支持，只支持同类型使用 举例测试sql 1select cast(array(1, 2, 3, 4) as string) as array_to_string; maxcompute运行结果 maxcompute报异常：FAILED: ODPS-0130141:[1,8] Illegal implicit type cast - cannot cast from ARRAY to STRING 提示的是 ARRAY&lt;&gt;类型字段 不能强制转换为 STRING 类型 hive运行结果 hive报异常：SQL语义错误: Error while compiling statement: FAILED: ClassCastException org.apache.hadoop.hive.serde2.typeinfo.ListTypeInfo cannot be cast to org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo 提示的是不同类型不能强转 spark运行结果 spark能顺利产出结果 替换方案使用 array_join函数 将array的元素拼接成字符串，再在首尾加上 ‘[ ‘ 和 ‘]’ 字符可以还原spark上的运行结果 1select concat(&#x27;[&#x27;,array_join(array(1, 2, 3, 4),&#x27;,&#x27;),&#x27;]&#x27;) as array_to_string; 📢注意macxcompute的array_join函数默认会忽略null元素，可在array_join函数中设置 nullreplacement 参数替代NULL元素 日期格式to_date(‘xxx’,’yyyyMMddHHmmss’)差异点hive语法中，to_date函数用法为：to_date(string timestamp)，返回DATE类型，格式为 yyyy-mm-dd ，仅有一个参数，支持用format格式解析 spark语法中，to_date函数用法为：to_date(date_str[, fmt]) ，返回DATE类型，格式为 yyyy-mm-dd ，支持用format格式解析日期 maxcompute语法中，to_date函数用法为：to_date(string , string )，返回DATETIME类型，格式为 yyyy-mm-dd hh:mi:ss ，支持用format格式解析日期 📢这里要注意的是，虽然spark和maxcompute中，to_date函数都支持用format格式解析日期，format格式是有差异的，主要表现在 分钟 位的格式 spark的format格式：yyyy为4位数的年，MM为2位数的月，dd为2位数的日，HH为24小时制的时，mm为2位数的分钟，ss为2位数的秒，ff3为3位精度毫秒maxcompute的format格式：yyyy为4位数的年，mm为2位数的月，dd为2位数的日，hh为24小时制的时，mi为2位数的分钟，ss为2位数的秒，ff3为3位精度毫秒 举例测试sql 1select to_date(&#x27;20221118123456&#x27;,&#x27;yyyyMMddHHmmss&#x27;),to_date(&#x27;2022-11-18 12:34:56&#x27;,&#x27;yyyy-MM-dd HH:mm:ss&#x27;); maxcompute运行结果 maxcompute报异常： FAILED: ODPS-0121095:Invalid arguments - format string has second part, but doesn’t have minute part : yyyyMMddHHmmss hive运行结果 hive报异常： Arguments length mismatch ‘’yyyyMMddhhmmss’’: to_date() requires 1 argument, got 2 提示的是to_date函数仅有1个参数 去掉format参数后的运行结果为： 从结果可以看到，to_date不能解析 yyyyMMddhhmmss 和 yyyyMMdd 格式 spark运行结果 spark能顺利产出结果 替换方案format格式修改：yyyy为4位数的年，mm为2位数的月，dd为2位数的日，hh为24小时制的时，mi为2位数的分钟，ss为2位数的秒，ff3为3位精度毫秒 修改后的能正常产出结果： 另，常见使用to_date报错sql为 date_format(date_add(to_date(pay_time,’yyyyMMddHHmmss’),2),’yyyyMMddHHmmss’) ，解读sql的作用是对 pay_time 加 2 天，建议用 UDF 修改这段sql为 yt_date_add(pay_time,2)，修改后简洁明了 date日期函数差异点spark和hive的date函数支持将标准的日期string转换为date类型 maxcomputer date函数只支持标准的日期string，带时分秒的时间string不支持 举例测试sql 1select date(&#x27;2022-12-21&#x27;),date(&#x27;2022-12-21 01:22:01&#x27;); maxcompute运行结果 maxcomputer对标准的日期string【2022-12-21】转换正确 但是对带时分秒的string转为错误，直接为null hive运行结果 结果符合预期 spark运行结果 spark能顺利产出结果 替换方案如果是为了格式转换，使用自定义 yt_date_format 函数 如果是为了获取date类型，使用 to_date函数 12select yt_date_format(&#x27;2022-12-21 01:22:01&#x27;,&#x27;yyyy-MM-dd&#x27;),to_date(&#x27;2022-12-21 01:22:01&#x27;); from_unixtime函数差异点spark和hive的from_unixtime函数将时间戳转换成格式化string类型，当时间戳为负数时，正常转换 maxcomputer from_unixtime函数转换负数时间戳时，存在时间便宜 举例测试sqlselect ‘1018-10-15 00:00:00’ – yyyyMMddHHmmss 时间戳,unix_timestamp(‘1018-10-15 00:00:00’) –时间戳,from_unixtime(unix_timestamp(‘1018-10-15 00:00:00’),’yyyyMMddHHmmss’) –转换格式 maxcompute运行结果 可以看到，原先日期为 ‘1018-10-15 00:00:00’,转换成yyyyMMddHHmmss格式原本期望为 10181015000000 但是实际结果为10181008235417,和预期不符合 hive运行结果 hive结果符合预期 spark运行结果 spark产出结果正确 替换方案使用自定义 yt_date_format 函数 123select &#x27;1018-10-15 00:00:00&#x27; -- yyyyMMddHHmmss 时间戳,unix_timestamp(&#x27;1018-10-15 00:00:00&#x27;) --时间戳,yt_date_format(&#x27;1018-10-15 00:00:00&#x27;,&#x27;yyyyMMddHHmmss&#x27;) --转换格式 使用自定义udf后正确 concat_ws差异差异点spark的concat_ws会支持类型的隐式转换 hive和maxcomputer concat_ws不支持，只支持同类型使用 举例测试sql 1select concat_ws(&quot;,&quot;,array(1,2,3)) maxcompute运行结果 报错提示数据类型不对，concat_ws只能处理ARRAY数据类型，而sql中是ARRAY数据类型，官方文档 中有详细说明 hive运行结果 报错提示数据类型不对，与maxcompute一个意思，concat_ws传入数组必须是Array类型 spark运行结果 spark执行结果符合预期 替换方案使用阿里云提供的array_join函数 1select array_join(array(1,2,3),&quot;,&quot;);","categories":[{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"}],"tags":[{"name":"Maxcompute","slug":"Maxcompute","permalink":"https://llye-hub.github.io/tags/Maxcompute/"}]},{"title":"mysql和hiveSQL的语法差别","slug":"SQL/mysql和hiveSQL的语法差别","date":"2023-02-17T08:06:16.000Z","updated":"2023-03-02T08:18:42.316Z","comments":true,"path":"posts/e912f2da.html","link":"","permalink":"https://llye-hub.github.io/posts/e912f2da.html","excerpt":"","text":"最近在牛客网上刷sql题，但编程语言居然只支持mysql，一些函数用法上与平时工作使用的hiveSQL有较大差别，所以在这篇博客中整理一下两种语法的函数使用差异 mysql内置函数 hive内置函数 日期、时间函数 函数用途 mysql函数 mysql用法 hive函数 hiveSQL用法 日期、时间格式化 date_format date_format(‘2008-08-08 22:23:01’, ‘%Y%m%d%H%i%s’) date_format date_format(‘2008-08-08 22:23:01’, ‘yyyyMMddHHmmss’) 日期、时间加 date_add date_add(‘2008-08-08 22:23:01’,interval 1 day&#x2F;hour&#x2F;minute&#x2F;second&#x2F;microsecond&#x2F;week&#x2F;month&#x2F;quarter&#x2F;year)，返回dateTime格式 date_add date_add(‘2008-08-08 22:23:01’,1)，只加days，返回date格式 日期、时间减 date_sub date_sub(‘2008-08-08 22:23:01’,interval 1 day&#x2F;hour&#x2F;minute&#x2F;second&#x2F;microsecond&#x2F;week&#x2F;month&#x2F;quarter&#x2F;year)，返回dateTime格式 date_sub date_sub(‘2008-08-08 22:23:01’,1)，只加days，返回date格式 日期相差 datediff datediff(‘2008-08-08 22:22:00’,’2008-08-07 22:23:00’) datediff datediff(‘2008-08-08 22:22:00’,’2008-08-07 22:23:00’)","categories":[{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"}],"tags":[]},{"title":"排序算法","slug":"题集/排序算法","date":"2023-02-17T05:46:19.000Z","updated":"2023-03-10T08:21:11.251Z","comments":true,"path":"posts/735e5788.html","link":"","permalink":"https://llye-hub.github.io/posts/735e5788.html","excerpt":"","text":"整理一些数据结构中常用的排序算法原理和java实现 快速排序原理在数组中找到一个基准值t，将小于t的值放它前面，大于t的值放它后面，再以此方法对子数组递归进行快速排序 java代码","categories":[{"name":"题集","slug":"题集","permalink":"https://llye-hub.github.io/categories/%E9%A2%98%E9%9B%86/"}],"tags":[]},{"title":"解题思路之动态规划","slug":"题集/解题思路之动态规划","date":"2023-02-16T09:11:19.000Z","updated":"2023-03-10T08:21:11.246Z","comments":true,"path":"posts/d6cdfd6a.html","link":"","permalink":"https://llye-hub.github.io/posts/d6cdfd6a.html","excerpt":"","text":"什么是动态规划动态规划，英文：Dynamic Programming，简称DP。简单理解，动态规划的每一个状态都能由上一个状态推导而来 解题步骤以斐波那契数列为例，动态规划问题可以拆解为五步曲： 1、确定dp数组和下标含义：第n个斐波那契数是dp[n] 2、确定递推公式（也可叫状态转移方程）：dp[n] = dp[n-1] + dp[n-2] 3、dp数组初始化：dp[0] = 0; dp[1] = 1 4、确定遍历顺序：从前到后遍历，dp[n]依赖dp[n-1]和dp[n-2] 5、举例推导dp数组：当n=10时，dp数组应该为：0 1 1 2 3 5 8 13 21 34 55 参考资料代码随想录之动态规划","categories":[{"name":"题集","slug":"题集","permalink":"https://llye-hub.github.io/categories/%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://llye-hub.github.io/tags/LeetCode/"}]},{"title":"SparkSQL优化之数据倾斜","slug":"SQL/SparkSQL优化之数据倾斜","date":"2023-02-09T02:19:52.000Z","updated":"2023-02-28T08:29:17.852Z","comments":true,"path":"posts/faab1ad7.html","link":"","permalink":"https://llye-hub.github.io/posts/faab1ad7.html","excerpt":"","text":"前言在Spark作业优化场景中，最常见且比较棘手的就是数据倾斜问题。个人认为，具备数据倾斜调优能力对从事数仓开发人员是必备的基本要求。当然，数据倾斜的场景是比较复杂的，针对不同的数据倾斜有不同的处理方案。 如何辨别和定位数据倾斜从Spark作业的执行计划看，若出现某个task任务比其他task任务执行耗时极其久，比如：某个stage有100个task，其中99个task在1min左右就执行成功，但是有1个task却执行了1个小时甚至更久，这种情况显然是出现了数据倾斜。 数据倾斜问题仅出现在shuffle过程，一些会触发shuffle的算子：distinct、groupByKey、reduceByKey、aggregateByKey、countByKey、join、cogroup、repartition等。对应提交的SparkSQL中可能有distinct、count(distinct)、group by、partition by、join等关键词。 常见的数据倾斜场景及解决方案碰到的数据倾斜案例窗口分组数据倾斜倾斜场景业务上有一张消息记录表msg_records，sql要求是取下一次回复消息 12345678910111213141516171819202122232425262728WITH msg_tmp as( select id -- 唯一键，消息id ,from_chat_id -- 消息发送者id ,to_chat_id -- 消息接受者id ,msg_time -- 消息时间 from msg_records)select id ,msg_time ,first_value(if(type = &#x27;reply&#x27;,id,null),true) over(partition by from_chat_id,to_chat_id order by msg_time,id rows between 1 following and unbounded following) as reply_msg_id_n1t -- 取下一次回复消息from( select id ,from_chat_id ,to_chat_id ,msg_time ,&#x27;send&#x27; as type from msg_tmp union all -- 调转，取返回消息 select id ,to_chat_id as from_chat_id ,from_chat_id as to_chat_id ,msg_time ,&#x27;reply&#x27; as type from msg_tmp) t1 sql执行分析有一个task执行耗时1h 数据倾斜分析根据窗口函数的分组from_chat_id + to_chat_id分析，数据量出现严重倾斜，表总数据量1亿多，其中，分组from_chat_id=12 and to_chat_id=81867的数据量有30w，其他分组数据量至多3w。 另外，分组from_chat_id=12 and to_chat_id=81867的数据在业务上可定义为脏数据，且first_value()函数计算出的值全为null。 经过测试验证发现，没有 rows between语句 或是 过滤倾斜数据 时，SQL执行很快 综上分析，再对照spark执行计划基本可以定位倾斜原因为窗口数据倾斜和rows between计算耗时 解决方案结合业务知识，在sql逻辑中过滤from_chat_id=12 and to_chat_id=81867的数据 最终，任务执行耗时从1h优化至10min 参考资料美团技术团队：Spark性能优化指南——高级篇","categories":[{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"}],"tags":[{"name":"数据倾斜","slug":"数据倾斜","permalink":"https://llye-hub.github.io/tags/%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C/"}]},{"title":"hiveSQL之生成连续数字","slug":"SQL/hiveSQL之生成连续数字","date":"2023-02-08T08:03:36.000Z","updated":"2023-02-20T03:39:51.495Z","comments":true,"path":"posts/3ce3d37f.html","link":"","permalink":"https://llye-hub.github.io/posts/3ce3d37f.html","excerpt":"","text":"sql要求生成100以内的全部整数 涉及udtf函数posexplode(ARRAY&lt;T&gt; a) 官方说明 Return: Returns a row-set with two columns (pos int,val T), one row for each element from the array. Description: posexplode() is similar to explode but instead of just returning the elements of the array it returns the element as well as its position in the original array. 用法示例：有如下一张表myTable (array&lt;int&gt;)myCol [100,200,300] [400,500,600] 执行hive sql 12345678-- 造数据with myTable as ( select array(100,200,300) as myCol union all select array(300,400,500) as myCol)-- 查询sqlSELECT posexplode(myCol) AS (pos, val) FROM myTable 得到结果为： (int)pos (int)val 0 100 1 200 2 300 0 400 1 500 2 600 sql实现借助posexplode返回的pos即可实现 12345select posexplode(split(space(99), &#x27; &#x27;)) as (pos, val)-- 返回的pos字段即为[0,99]区间的100个整数-- 或者下面这种写法select posexplode(split(repeat(&#x27;,&#x27;,99), &#x27;,&#x27;)) as (pos, val) 实例场景数据重复扩容10倍12345678910-- 造数据with myTable as ( select &#x27;张三&#x27; as name union all select &#x27;李四&#x27; as name)-- 将myTable的每行数据重复复制为5行SELECT name ,posexplode(split(space(4), &#x27; &#x27;)) AS (pos, val) FROM myTable 得到结果为： name pos val 张三 0 张三 1 张三 2 张三 3 张三 4 李四 0 李四 1 李四 2 李四 3 李四 4 生成指定范围内的连续日期123456789with subquery as ( select split(space(datediff(&#x27;2023-1-31&#x27;,&#x27;2022-11-30&#x27;)), &#x27; &#x27;) as x) select date_add(&#x27;2022-11-30&#x27;, pos) as new_datefrom subquery t lateral view posexplode(x) pe as pos, val","categories":[{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"}],"tags":[{"name":"SQL高级语法","slug":"SQL高级语法","permalink":"https://llye-hub.github.io/tags/SQL%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/"}]},{"title":"SparkSQL之conf参数","slug":"SQL/SparkSQL之conf参数","date":"2023-02-03T08:15:46.000Z","updated":"2023-02-20T05:44:02.740Z","comments":true,"path":"posts/5e220c44.html","link":"","permalink":"https://llye-hub.github.io/posts/5e220c44.html","excerpt":"","text":"资源参数num-executors 参数说明：该参数用于设置Spark作业总共要用多少个Executor进程来执行。Driver在向YARN集群管理器申请资源时，YARN集群管理器会尽可能按照你的设置来在集群的各个工作节点上，启动相应数量的Executor进程。这个参数非常之重要，如果不设置的话，默认只会给你启动少量的Executor进程，此时你的Spark作业的运行速度是非常慢的。 参数调优建议：每个Spark作业的运行一般设置50~100个左右的Executor进程比较合适，设置太少或太多的Executor进程都不好。设置的太少，无法充分利用集群资源；设置的太多的话，大部分队列可能无法给予充分的资源。 executor-memory 参数说明：该参数用于设置每个Executor进程的内存。Executor内存的大小，很多时候直接决定了Spark作业的性能，而且跟常见的JVM OOM异常，也有直接的关联。 参数调优建议：每个Executor进程的内存设置4G~8G较为合适。但是这只是一个参考值，具体的设置还是得根据不同部门的资源队列来定。可以看看自己团队的资源队列的最大内存限制是多少，num-executors乘以executor-memory，是不能超过队列的最大内存量的。此外，如果你是跟团队里其他人共享这个资源队列，那么申请的内存量最好不要超过资源队列最大总内存的1&#x2F;3~1&#x2F;2，避免你自己的Spark作业占用了队列所有的资源，导致别的同学的作业无法运行。 ##executor-cores 参数说明：该参数用于设置每个Executor进程的CPU core数量。这个参数决定了每个Executor进程并行执行task线程的能力。因为每个CPU core同一时间只能执行一个task线程，因此每个Executor进程的CPU core数量越多，越能够快速地执行完分配给自己的所有task线程。 参数调优建议：Executor的CPU core数量设置为2~4个较为合适。同样得根据不同部门的资源队列来定，可以看看自己的资源队列的最大CPU core限制是多少，再依据设置的Executor数量，来决定每个Executor进程可以分配到几个CPU core。同样建议，如果是跟他人共享这个队列，那么num-executors * executor-cores不要超过队列总CPU core的1&#x2F;3~1&#x2F;2左右比较合适，也是避免影响其他同学的作业运行。 driver-memory 参数说明：该参数用于设置Driver进程的内存。 参数调优建议：Driver的内存通常来说不设置，或者设置1G左右应该就够了。唯一需要注意的一点是，如果需要使用collect算子将RDD的数据全部拉取到Driver上进行处理，那么必须确保Driver的内存足够大，否则会出现OOM内存溢出的问题。 spark.default.parallelism 参数说明：该参数用于设置每个stage的默认task数量。这个参数极为重要，如果不设置可能会直接影响你的Spark作业性能。 参数调优建议：Spark作业的默认task数量为500~1000个较为合适。很多同学常犯的一个错误就是不去设置这个参数，那么此时就会导致Spark自己根据底层HDFS的block数量来设置task的数量，默认是一个HDFS block对应一个task。通常来说，Spark默认设置的数量是偏少的（比如就几十个task），如果task数量偏少的话，就会导致你前面设置好的Executor的参数都前功尽弃。试想一下，无论你的Executor进程有多少个，内存和CPU有多大，但是task只有1个或者10个，那么90%的Executor进程可能根本就没有task执行，也就是白白浪费了资源！因此Spark官网建议的设置原则是，设置该参数为num-executors * executor-cores的2~3倍较为合适，比如Executor的总CPU core数量为300个，那么设置1000个task是可以的，此时可以充分地利用Spark集群的资源。 spark.storage.memoryFraction 参数说明：该参数用于设置RDD持久化数据在Executor内存中能占的比例，默认是0.6。也就是说，默认Executor 60%的内存，可以用来保存持久化的RDD数据。根据你选择的不同的持久化策略，如果内存不够时，可能数据就不会持久化，或者数据会写入磁盘。 参数调优建议：如果Spark作业中，有较多的RDD持久化操作，该参数的值可以适当提高一些，保证持久化的数据能够容纳在内存中。避免内存不够缓存所有的数据，导致数据只能写入磁盘中，降低了性能。但是如果Spark作业中的shuffle类操作比较多，而持久化操作比较少，那么这个参数的值适当降低一些比较合适。此外，如果发现作业由于频繁的gc导致运行缓慢（通过spark web ui可以观察到作业的gc耗时），意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。 spark.shuffle.memoryFraction 参数说明：该参数用于设置shuffle过程中一个task拉取到上个stage的task的输出后，进行聚合操作时能够使用的Executor内存的比例，默认是0.2。也就是说，Executor默认只有20%的内存用来进行该操作。shuffle操作在进行聚合时，如果发现使用的内存超出了这个20%的限制，那么多余的数据就会溢写到磁盘文件中去，此时就会极大地降低性能。 参数调优建议：如果Spark作业中的RDD持久化操作较少，shuffle操作较多时，建议降低持久化操作的内存占比，提高shuffle操作的内存占比比例，避免shuffle过程中数据过多时内存不够用，必须溢写到磁盘上，降低了性能。此外，如果发现作业由于频繁的gc导致运行缓慢，意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。 广播相关spark.sql.broadcastTimeoutspark.kryoserializer.buffer.max&#x3D;128Mspark.sql.shuffle.partitions&#x3D;1000spark.sql.orc.compression.codec&#x3D;zlibspark.sql.files.maxPartitionBytes&#x3D;65536","categories":[{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"}],"tags":[]},{"title":"hiveSQL之set参数","slug":"SQL/hiveSQL之set参数","date":"2023-02-03T08:14:57.000Z","updated":"2023-02-20T07:52:21.554Z","comments":true,"path":"posts/4547a6e2.html","link":"","permalink":"https://llye-hub.github.io/posts/4547a6e2.html","excerpt":"","text":"hive.merge.mapfilesDefault Value: truemap-only任务结束时合并小文件 hive.merge.mapredfilesDefault Value: truemap-reduce任务结束时合并小文件 hive.optimize.cte.materialize.threshold默认情况下是-1（关闭）；当开启（大于0），比如设置为2，则如果with..as语句被引用2次及以上时，会把with..as语句生成的table物化，从而做到with..as语句只执行一次，来提高效率","categories":[{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"}],"tags":[]},{"title":"hiveSQL命令之alter partition","slug":"SQL/hiveSQL命令之alter-partition","date":"2023-02-02T06:02:26.000Z","updated":"2023-02-21T06:18:34.677Z","comments":true,"path":"posts/8a94c1da.html","link":"","permalink":"https://llye-hub.github.io/posts/8a94c1da.html","excerpt":"","text":"msck repair table https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-ExchangePartition","categories":[{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"}],"tags":[{"name":"改分区","slug":"改分区","permalink":"https://llye-hub.github.io/tags/%E6%94%B9%E5%88%86%E5%8C%BA/"}]},{"title":"hadoop命令之distcp分布式拷贝","slug":"hadoop/hadoop命令之distcp分布式拷贝","date":"2023-02-01T02:06:03.000Z","updated":"2023-02-20T08:58:42.949Z","comments":true,"path":"posts/bcc5bdf2.html","link":"","permalink":"https://llye-hub.github.io/posts/bcc5bdf2.html","excerpt":"","text":"distcp用途DistCp（分布式拷贝）是用于大规模集群内部和集群之间拷贝的工具。使用Map&#x2F;Reduce实现文件分发，错误处理和恢复，以及报告生成。DistCp将文件和目录的列表作为map任务的输入，每个任务会完成源列表中部分文件的拷贝。 distcp用法命令行中可以指定多个源目录 12# hadoop distcp source_dir1 [source_dir2 source_dir3……] target_dir 集群内拷贝 12# hadoop distcp [hdfs://nn:8020]/db/table_a/partition=1 [hdfs://nn:8020]/db/table_b/partition=1 不同集群间拷贝，DistCp必须运行在目标端集群上 12# hadoop distcp hdfs://nn1:8020/db/table_a/partition=1 hdfs://nn2:8020/db/table_b/partition=1 常用参数选项-overwrite源文件覆盖同名目标文件 -update拷贝目标目录下不存在而源目录下存在的文件，当文件大小不一致时，源文件覆盖同名目标文件 -delete删除目标目录下存在，但源目录下不存在的文件，需要配合-update或-overwrite使用 -p[rbugpcaxt]控制是否保留源文件的属性，-p默认全部保留，常用的为-pbugp。修改次数不会被保留。并且当指定 -update 时，更新的状态不会 被同步，除非文件大小不同（比如文件被重新创建）。 标识 含义 备注 r replication number 文件副本数 b block size 文件块大小 u user 用户 g group 组 p permission 文件权限 c checksum-type 校验和类型 a acl x xattr t timestamp 时间戳 -m控制拷贝时的map任务最大个数如果没使用-m选项，DistCp会尝试在调度工作时指定map数目&#x3D;min(total_bytes&#x2F;bytes.per.map,20*num_task_trackers)， 其中bytes.per.map默认是256MB。 应用实例表结构一致的两表互相拷贝数据1234567891011121314151617181920212223242526272829303132333435#********************************************************************************# ** 功能描述：通过hdfs文件路径拷贝的方式，实现表结构完全相同的表互相拷贝数据#********************************************************************************# 指定源路径、目标路径source_dir=/db/table_a/partition=1target_dir=/db/table_b/partition=1db_name=db_atarget_tbl_name=db_a.table_b# 判断源路径是否存在，不存在则返回hadoop fs -test -e $source_dirif [ $? -ne 0 ];then echo &quot;源路径$source_dir不存在&quot; exit 1fi# 判断目标路径是否存在，不存在则创建hadoop fs -test -e $target_dirif [ $? -ne 0 ];then hadoop fs -mkdir $target_dir echo &quot;目标路径$target_dir不存在，创建成功&quot;fi# 开始拷贝echo &quot;开始hdfs文件拷贝，source_dir=$source_dir，target_dir=$target_dir&quot;hadoop distcp -overwrite -delete -pbugp $source_dir $target_dirif [ $? -eq 0 ];then echo &quot;hdfs文件拷贝成功&quot;else echo &quot;hdfs文件拷贝失败&quot; exit -1fi# 刷新目标表的metastore信息hive -database $db_name -v -e &quot;msck repair table $target_tbl_name;&quot;if [ $? -eq 0 ];then echo &quot;$target_tbl_name表的metastore信息刷新成功&quot; exit 0fi 参考资料DistCp使用指南Hadoop中文网：DistCp","categories":[{"name":"hadoop","slug":"hadoop","permalink":"https://llye-hub.github.io/categories/hadoop/"}],"tags":[{"name":"hadoop命令","slug":"hadoop命令","permalink":"https://llye-hub.github.io/tags/hadoop%E5%91%BD%E4%BB%A4/"},{"name":"hdfs文件拷贝","slug":"hdfs文件拷贝","permalink":"https://llye-hub.github.io/tags/hdfs%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/"}]},{"title":"Shell命令之set-e","slug":"shell/Shell命令之set-e","date":"2023-01-31T09:26:54.000Z","updated":"2023-02-20T08:35:55.810Z","comments":true,"path":"posts/ba81765c.html","link":"","permalink":"https://llye-hub.github.io/posts/ba81765c.html","excerpt":"","text":"","categories":[{"name":"shell","slug":"shell","permalink":"https://llye-hub.github.io/categories/shell/"}],"tags":[{"name":"shell命令","slug":"shell命令","permalink":"https://llye-hub.github.io/tags/shell%E5%91%BD%E4%BB%A4/"}]},{"title":"hadoop基本命令","slug":"hadoop/hadoop基本命令","date":"2023-01-31T09:10:11.000Z","updated":"2023-02-20T08:35:55.810Z","comments":true,"path":"posts/b24f0feb.html","link":"","permalink":"https://llye-hub.github.io/posts/b24f0feb.html","excerpt":"","text":"hadoop fs -cphadoop fs -rm -rhadoop distcp -overwrite -delete -phadoop fs -mkdir -p","categories":[{"name":"hadoop","slug":"hadoop","permalink":"https://llye-hub.github.io/categories/hadoop/"}],"tags":[{"name":"hadoop命令","slug":"hadoop命令","permalink":"https://llye-hub.github.io/tags/hadoop%E5%91%BD%E4%BB%A4/"}]},{"title":"hive动态分区","slug":"hive/hive动态分区","date":"2023-01-30T09:01:49.000Z","updated":"2023-02-20T08:35:55.811Z","comments":true,"path":"posts/44d3528f.html","link":"","permalink":"https://llye-hub.github.io/posts/44d3528f.html","excerpt":"","text":"","categories":[{"name":"hive","slug":"hive","permalink":"https://llye-hub.github.io/categories/hive/"}],"tags":[{"name":"动态分区","slug":"动态分区","permalink":"https://llye-hub.github.io/tags/%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA/"}]},{"title":"SparkSQL无法处理hive表中的空ORC文件","slug":"spark/Spark SQL无法处理hive表中的空ORC文件","date":"2022-12-16T09:56:46.000Z","updated":"2023-02-20T03:40:11.835Z","comments":true,"path":"posts/1f69e18b.html","link":"","permalink":"https://llye-hub.github.io/posts/1f69e18b.html","excerpt":"","text":"碰到了什么问题起因是在使用SparkSQL查询表时，遇到报错：java.lang.RuntimeException: serious problem at OrcInputFormat.generateSplitsInfo之后，换了hiveSQL执行成功，但这并不算排查成功，排查应尽可能追根究底，以后才能做到举一反三，所以基于网上资料和个人理解写了这篇博客 问题分析定位问题根据报错的java类名+方法名（OrcInputFormat.generateSplitsInfo），可以判断问题出现在读取orc文件阶段。 查看HDFS文件查看表存储路径下的文件，发现有1个空文件 为什么会有空文件1、sparkSQL建表2、表写入数据时，sql最后做了distribute by操作，产生了空文件 sparksql读取空文件的时候，因为表是orc格式的，导致sparkSQL解析orc文件出错。但是用hive却可以正常读取。 网上搜罗的解决办法问题原因基本清晰了，就是读取空文件导致的报错，如果非得用SparkSQL执行查询语句，这里提供几种解决方案： 1、修改表存储格式为parquet这种方法是网上查询到的，但在实际数仓工作中，对于已在使用中的表来说，删表重建操作是不允许的，所以不推荐 2、参数设置：set hive.exec.orc.split.strategy=ETL既然已经定位到是空文件读取的问题，那就从文件读取层面解决。 自建集群Spark源码： 12345678910111213141516171819202122232425262728// org/apache/hadoop/hive/ql/io/orc/OrcInputFormat.javaswitch(context.splitStrategyKind) &#123; case BI: // BI strategy requested through config splitStrategy = new BISplitStrategy(context, fs, dir, children, isOriginal, deltas, covered); break; case ETL: // ETL strategy requested through config splitStrategy = new ETLSplitStrategy(context, fs, dir, children, isOriginal, deltas, covered); break; default: // HYBRID strategy if (avgFileSize &gt; context.maxSize) &#123; splitStrategy = new ETLSplitStrategy(context, fs, dir, children, isOriginal, deltas, covered); &#125; else &#123; splitStrategy = new BISplitStrategy(context, fs, dir, children, isOriginal, deltas, covered); &#125; break;&#125;// ./repository/org/spark-project/hive/hive-exec/1.2.1.spark2/hive-exec-1.2.1.spark2.jar!/org/apache/hadoop/hive/conf/HiveConf.classHIVE_ORC_SPLIT_STRATEGY(&quot;hive.exec.orc.split.strategy&quot;, &quot;HYBRID&quot;, new StringSet(new String[]&#123;&quot;HYBRID&quot;, &quot;BI&quot;, &quot;ETL&quot;&#125;), &quot;This is not a user level config. BI strategy is used when the requirement is to spend less time in split generation as opposed to query execution (split generation does not read or cache file footers). ETL strategy is used when spending little more time in split generation is acceptable (split generation reads and caches file footers). HYBRID chooses between the above strategies based on heuristics.&quot;) 也就是说，默认是HYBRID（混合模式读取，根据平均文件大小和文件个数选择ETL还是BI模式）。 BI策略以文件为粒度进行split划分 ETL策略会将文件进行切分，多个stripe组成一个split HYBRID策略为：当文件的平均大小大于hadoop最大split值（默认256 * 1024 * 1024）时使用ETL策略，否则使用BI策略。 ETLSplitStrategy和BISplitStrategy两种策略在对getSplits方法采用了不同的实现方式，BISplitStrategy在面对空文件时会出现空指针异常，ETLSplitStrategy则帮我们过滤了空文件。 123456789101112131415161718192021222324252627282930313233// org.apache.hadoop.hive.ql.io.orc.OrcInputFormat.BISplitStrategy#getSplitspublic List&lt;OrcSplit&gt; getSplits() throws IOException &#123; List&lt;OrcSplit&gt; splits = Lists.newArrayList(); for (FileStatus fileStatus : fileStatuses) &#123; String[] hosts = SHIMS .getLocationsWithOffset(fs, fileStatus) // 对空文件会返回一个空的TreeMap .firstEntry() // null .getValue() // NPE .getHosts(); OrcSplit orcSplit = new OrcSplit(fileStatus.getPath(), 0, fileStatus.getLen(), hosts, null, isOriginal, true, deltas, -1); splits.add(orcSplit); &#125; // add uncovered ACID delta splits splits.addAll(super.getSplits()); return splits;&#125;// org.apache.hadoop.hive.ql.io.orc.OrcInputFormat.ETLSplitStrategy#getSplitspublic List&lt;SplitInfo&gt; getSplits() throws IOException &#123; List&lt;SplitInfo&gt; result = Lists.newArrayList(); for (FileStatus file : files) &#123; FileInfo info = null; if (context.cacheStripeDetails) &#123; info = verifyCachedFileInfo(file); &#125; // ignore files of 0 length（此处对空文件做了过滤） if (file.getLen() &gt; 0) &#123; result.add(new SplitInfo(context, fs, file, info, isOriginal, deltas, true, dir, covered)); &#125; &#125; return result;&#125; 本质上是一个BUG，Spark2.4版本中解决了这个问题。 123456789101112131415// org.apache.hadoop.hive.ql.io.orc.OrcInputFormat.BISplitStrategy#getSplitspublic List&lt;OrcSplit&gt; getSplits() throws IOException &#123; List&lt;OrcSplit&gt; splits = Lists.newArrayList(); for (FileStatus fileStatus : fileStatuses) &#123; String[] hosts = SHIMS.getLocationsWithOffset(fs, fileStatus).firstEntry().getValue() .getHosts(); OrcSplit orcSplit = new OrcSplit(fileStatus.getPath(), 0, fileStatus.getLen(), hosts, null, isOriginal, true, deltas, -1); splits.add(orcSplit); &#125; // add uncovered ACID delta splits splits.addAll(super.getSplits()); return splits;&#125; 了解了spark读取orc文件策略，那么就设置避免混合模式使用根据文件大小分割读取，不根据文件来读取 1set hive.exec.orc.split.strategy=ETL 经测试无效。原因分析：1、参数未生效2、hdfs文件有两个，大小为49B和7.45G，文件的平均大小肯定是大于256M的，所以按默认HYBRID策略规则应本就是采取的ETL策略split ORC文件 3、参数设置：spark.sql.hive.convertMetastoreOrc=true关于参数的官方介绍 Since Spark 2.3, Spark supports a vectorized ORC reader with a new ORC file format for ORC files. To do that, the following configurations are newly added. The vectorized reader is used for the native ORC tables (e.g., the ones created using the clause USING ORC) when spark.sql.orc.impl is set to native and spark.sql.orc.enableVectorizedReader is set to true. For the Hive ORC serde tables (e.g., the ones created using the clause USING HIVE OPTIONS (fileFormat ‘ORC’)), the vectorized reader is used when spark.sql.hive.convertMetastoreOrc is also set to true. 经测试有效。若仍报错，可尝试搭配spark.sql.orc.impl&#x3D;native使用。 补充知识hive.exec.orc.split.strategy参数控制在读取ORC表时生成split的策略。对于一些较大的ORC表，可能其footer较大，ETL策略可能会导致其从hdfs拉取大量的数据来切分split，甚至会导致driver端OOM，因此这类表的读取建议使用BI策略。对于一些较小的尤其有数据倾斜的表（这里的数据倾斜指大量stripe存储于少数文件中），建议使用ETL策略。另外，spark.hadoop.mapreduce.input.fileinputformat.split.minsize参数可以控制在ORC切分时stripe的合并处理。具体逻辑是，当几个stripe的大小小于spark.hadoop.mapreduce.input.fileinputformat.split.minsize时，会合并到一个task中处理。可以适当调小该值，以此增大读ORC表的并发。 参考资料SPARK查ORC格式HIVE数据报错NULLPOINTEREXCEPTIONSparkSQL读取ORC表时遇到空文件","categories":[{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"}],"tags":[{"name":"ORC","slug":"ORC","permalink":"https://llye-hub.github.io/tags/ORC/"}]},{"title":"get_json_object在sql中的高级用法","slug":"SQL/get_json_object在sql中的高级用法","date":"2022-12-16T03:46:24.000Z","updated":"2023-02-20T03:39:56.457Z","comments":true,"path":"posts/5f45fcd7.html","link":"","permalink":"https://llye-hub.github.io/posts/5f45fcd7.html","excerpt":"","text":"语法介绍12get_json_object(String json_string, String path)-- return string get_json_object函数是用来根据指定路径提取json字符串中的json对象，并返回json对象的json字符串 现有困惑关于这个函数最常见的用法就是get_json_object(&#39;&#123;&quot;a&quot;:&quot;b&quot;&#125;&#39;, &#39;$.a&#39;)，返回结果b但$.a这种path写法仅适用于简单的多层嵌套json字符串解析，碰到嵌套层有json数组时就难以解析了比如，要提取下面这段json中的所有weight对象的值 123456789&#123; &quot;store&quot;: &#123; &quot;fruit&quot;:[&#123;&quot;weight&quot;:8,&quot;type&quot;:&quot;apple&quot;&#125;, &#123;&quot;weight&quot;:9,&quot;type&quot;:&quot;pear&quot;&#125;], //json数组 &quot;bicycle&quot;:&#123;&quot;price&quot;:19.95,&quot;color&quot;:&quot;red&quot;&#125; &#125;, &quot;email&quot;:&quot;amy@only_for_json_udf_test.net&quot;, &quot;owner&quot;:&quot;amy&quot; &#125; 通过$.store.fruit.weight路径是无法提取的，$.store.fruit[0].weight这种写法仅能获取json数组中第一个json字符串中weight对象的值，也总不能用[0]、[1]、[2]……的方式无穷尽取值吧 到这里思维就限制住了，遇到这种情况时，以前的方式是通过正则表达式处理具体实现如下：首先将item_properties按指定分隔符split为array数组，再利用explode函数将array数组的元素逐行输出，最终得到的item_propertie即为单个json字符串，可根据$.提取指定json对象的值， 12345678910-- item_properties = [&#123;&quot;id&quot;:42,&quot;name&quot;:&quot;包装&quot;,&quot;sort&quot;:0,&quot;type&quot;:1&#125;-- ,&#123;&quot;id&quot;:43,&quot;name&quot;:&quot;种类&quot;,&quot;sort&quot;:0,&quot;type&quot;:1&#125;-- ,&#123;&quot;id&quot;:44,&quot;name&quot;:&quot;规格&quot;,&quot;sort&quot;:0,&quot;type&quot;:2&#125;-- ,&#123;&quot;id&quot;:63,&quot;name&quot;:&quot;保质期(天)&quot;,&quot;sort&quot;:0,&quot;type&quot;:2&#125;-- ,&#123;&quot;id&quot;:100,&quot;name&quot;:&quot;适用年龄&quot;,&quot;sort&quot;:0,&quot;type&quot;:2&#125;-- ,&#123;&quot;id&quot;:101,&quot;name&quot;:&quot;储存条件&quot;,&quot;sort&quot;:0,&quot;type&quot;:2&#125;]select get_json_object(item_propertie,&#x27;$.id&#x27;)from table_alateral view explode(split(regexp_replace(substr(item_properties,2,length(item_properties)-2),&#x27;\\\\&#125;\\\\,\\\\&#123;&#x27;,&#x27;\\\\&#125;\\\\|\\\\|\\\\&#123;&#x27;),&#x27;\\\\|\\\\|&#x27;)) tmp as item_propertie 但上面这种处理方式存在bug，将json数据split为array数组时，必须保证指定分隔符不出现在单个json字符串中，比如上述case中是用&#125;,&#123;替换为&#125;||&#123;，再以||作为分隔符split，如若在单个json字符串中也出现了&#125;,&#123;或是||就会导致解析失败 怎么高级了突然有一天在翻看hive官方文档时发现path支持的通配符* 1234$ : 表示根节点. : 表示子节点[] : [number]表示数组下标，从0开始* : []的通配符，返回整个数组 所以，一开始的问题应该按如下解法： 123456789-- jsonArray = &#123;&quot;store&quot;:-- &#123;-- &quot;fruit&quot;:[&#123;&quot;weight&quot;:8,&quot;type&quot;:&quot;apple&quot;&#125;, &#123;&quot;weight&quot;:9,&quot;type&quot;:&quot;pear&quot;&#125;],-- &quot;bicycle&quot;:&#123;&quot;price&quot;:19.95,&quot;color&quot;:&quot;red&quot;&#125;-- &#125;, -- &quot;email&quot;:&quot;amy@only_for_json_udf_test.net&quot;, -- &quot;owner&quot;:&quot;amy&quot;&#125;select get_json_object(jsonArray, &#x27;$.store.fruit[*].weight&#x27;);-- return [8,9] 笔者个人认为，高级之处在于写法极其清爽，按照以前用正则表达式的处理方法，需要多道处理才能得到结果[8,9]，而且其中还有隐性风险，但是现在$.store.fruit[*].weight这种极简语法既避免了风险，又清晰易理解","categories":[{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"}],"tags":[{"name":"SQL高级语法","slug":"SQL高级语法","permalink":"https://llye-hub.github.io/tags/SQL%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/"}]},{"title":"资料汇总","slug":"资料汇总","date":"2022-12-16T03:46:24.000Z","updated":"2023-04-17T09:29:14.804Z","comments":true,"path":"posts/76d5a95a.html","link":"","permalink":"https://llye-hub.github.io/posts/76d5a95a.html","excerpt":"","text":"SparkSQLSpark SQL Limit 介绍及优化 Spark性能优化指南——基础篇 Spark性能优化指南——高级篇 大数据笔记大数据入门指南 数据结构与算法代码随想录 数据治理存储和计算资源都节省 30%，网易云音乐数据治理实践 数据库数据库内核杂谈系列 流量数仓用户流量数仓建设思考（一）：基于漏斗模型的通用建设 乱七八糟的2万字揭秘阿里巴巴数据治理平台建设经验","categories":[{"name":"资料","slug":"资料","permalink":"https://llye-hub.github.io/categories/%E8%B5%84%E6%96%99/"}],"tags":[]}],"categories":[{"name":"对照文件存放的目录名称","slug":"对照文件存放的目录名称","permalink":"https://llye-hub.github.io/categories/%E5%AF%B9%E7%85%A7%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE%E7%9A%84%E7%9B%AE%E5%BD%95%E5%90%8D%E7%A7%B0/"},{"name":"数据仓库","slug":"数据仓库","permalink":"https://llye-hub.github.io/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"},{"name":"hive","slug":"hive","permalink":"https://llye-hub.github.io/categories/hive/"},{"name":"SQL","slug":"SQL","permalink":"https://llye-hub.github.io/categories/SQL/"},{"name":"阅读笔记","slug":"阅读笔记","permalink":"https://llye-hub.github.io/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"},{"name":"spark","slug":"spark","permalink":"https://llye-hub.github.io/categories/spark/"},{"name":"hadoop","slug":"hadoop","permalink":"https://llye-hub.github.io/categories/hadoop/"},{"name":"shell","slug":"shell","permalink":"https://llye-hub.github.io/categories/shell/"},{"name":"题集","slug":"题集","permalink":"https://llye-hub.github.io/categories/%E9%A2%98%E9%9B%86/"},{"name":"资料","slug":"资料","permalink":"https://llye-hub.github.io/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"文章内容的关键词","slug":"文章内容的关键词","permalink":"https://llye-hub.github.io/tags/%E6%96%87%E7%AB%A0%E5%86%85%E5%AE%B9%E7%9A%84%E5%85%B3%E9%94%AE%E8%AF%8D/"},{"name":"数仓建模","slug":"数仓建模","permalink":"https://llye-hub.github.io/tags/%E6%95%B0%E4%BB%93%E5%BB%BA%E6%A8%A1/"},{"name":"private","slug":"private","permalink":"https://llye-hub.github.io/tags/private/"},{"name":"写UDF","slug":"写UDF","permalink":"https://llye-hub.github.io/tags/%E5%86%99UDF/"},{"name":"hiveSQL","slug":"hiveSQL","permalink":"https://llye-hub.github.io/tags/hiveSQL/"},{"name":"读书笔记","slug":"读书笔记","permalink":"https://llye-hub.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"内置函数","slug":"内置函数","permalink":"https://llye-hub.github.io/tags/%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"},{"name":"spark on yarn","slug":"spark-on-yarn","permalink":"https://llye-hub.github.io/tags/spark-on-yarn/"},{"name":"hive安装","slug":"hive安装","permalink":"https://llye-hub.github.io/tags/hive%E5%AE%89%E8%A3%85/"},{"name":"hadoop安装","slug":"hadoop安装","permalink":"https://llye-hub.github.io/tags/hadoop%E5%AE%89%E8%A3%85/"},{"name":"shell命令","slug":"shell命令","permalink":"https://llye-hub.github.io/tags/shell%E5%91%BD%E4%BB%A4/"},{"name":"免密登录","slug":"免密登录","permalink":"https://llye-hub.github.io/tags/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"},{"name":"sql练习","slug":"sql练习","permalink":"https://llye-hub.github.io/tags/sql%E7%BB%83%E4%B9%A0/"},{"name":"窗口函数","slug":"窗口函数","permalink":"https://llye-hub.github.io/tags/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/"},{"name":"java","slug":"java","permalink":"https://llye-hub.github.io/tags/java/"},{"name":"数据结构","slug":"数据结构","permalink":"https://llye-hub.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"Maxcompute","slug":"Maxcompute","permalink":"https://llye-hub.github.io/tags/Maxcompute/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://llye-hub.github.io/tags/LeetCode/"},{"name":"数据倾斜","slug":"数据倾斜","permalink":"https://llye-hub.github.io/tags/%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C/"},{"name":"SQL高级语法","slug":"SQL高级语法","permalink":"https://llye-hub.github.io/tags/SQL%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/"},{"name":"改分区","slug":"改分区","permalink":"https://llye-hub.github.io/tags/%E6%94%B9%E5%88%86%E5%8C%BA/"},{"name":"hadoop命令","slug":"hadoop命令","permalink":"https://llye-hub.github.io/tags/hadoop%E5%91%BD%E4%BB%A4/"},{"name":"hdfs文件拷贝","slug":"hdfs文件拷贝","permalink":"https://llye-hub.github.io/tags/hdfs%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/"},{"name":"动态分区","slug":"动态分区","permalink":"https://llye-hub.github.io/tags/%E5%8A%A8%E6%80%81%E5%88%86%E5%8C%BA/"},{"name":"ORC","slug":"ORC","permalink":"https://llye-hub.github.io/tags/ORC/"}]}